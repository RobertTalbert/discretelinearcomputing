{"type":"settings","backend_state":"running","trust":true,"kernel":"anaconda3","kernel_usage":{"cpu":0,"memory":66920448},"kernel_state":"idle"}
{"type":"file","last_load":1514315738883}
{"type":"cell","id":"b8726a","pos":0,"input":"# Group by\n\nThis refers to three ways of manipulating data:\n\n- **Splitting** data into groups based on some criteria\n- **Applying** a function to each group independently\n- **Combining** results into a data structure\n\nSeveral things could happen in Applying: \n\n- Aggregation -- Computing summary stats on each group\n- Transformation -- Performing a computation on each group to return a like-indexed but changed group, e.g. normalizing data or filling in NA's\n- Filtration -- Discarding some groups according to a computation that evaluates True or False \n- Some combination of these \n\n\n## Splitting an object into groups \n\nObjects can be split by axes. ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.150219</td>\n      <td>0.328424</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.491282</td>\n      <td>-0.396930</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>0.491505</td>\n      <td>-1.811466</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>0.460739</td>\n      <td>0.422627</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.476846</td>\n      <td>-0.393134</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>-1.218327</td>\n      <td>-0.023151</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.018537</td>\n      <td>-1.021760</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-1.571777</td>\n      <td>0.351894</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":2}},"exec_count":2,"start":1514473000387,"input":"df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],\n                   'B' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],\n                   'C' : np.random.randn(8), \n                   'D' : np.random.randn(8)})\ndf","state":"done","pos":1,"type":"cell","end":1514473000442,"id":"30cc91","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<pandas.core.groupby.DataFrameGroupBy object at 0x7f72c539bd68>"},"exec_count":3}},"exec_count":3,"start":1514473000448,"input":"grouped1 = df.groupby('A')\ngrouped1","state":"done","pos":2,"type":"cell","end":1514473000463,"id":"8b7839","kernel":"anaconda3"}
{"exec_count":1,"start":1514472999845,"input":"import pandas as pd\nimport numpy as np","state":"done","pos":-1,"type":"cell","end":1514473000383,"id":"178875","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.150219</td>\n      <td>0.328424</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.491282</td>\n      <td>-0.396930</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>0.491505</td>\n      <td>-1.811466</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>0.460739</td>\n      <td>0.422627</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.476846</td>\n      <td>-0.393134</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>-1.218327</td>\n      <td>-0.023151</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.018537</td>\n      <td>-1.021760</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-1.571777</td>\n      <td>0.351894</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":4}},"exec_count":4,"start":1514473000483,"input":"# Hmm. I'm not seeing what actually happened when we grouped. \n\ngrouped1.head()","state":"done","pos":3,"type":"cell","end":1514473000498,"id":"dd81ba","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"    Points  Rank    Team  Year\n0      876     1  Riders  2014\n1      789     2  Riders  2015\n2      863     2  Devils  2014\n3      673     3  Devils  2015\n4      741     3   Kings  2014\n5      812     4   kings  2015\n6      756     1   Kings  2016\n7      788     1   Kings  2017\n8      694     2  Riders  2016\n9      701     4  Royals  2014\n10     804     1  Royals  2015\n11     690     2  Riders  2017\n"}},"exec_count":5,"start":1514473000501,"input":"# Another example from https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm \n\nipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n         'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n         'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n         'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n         'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}\ndf2 = pd.DataFrame(ipl_data)\n\nprint(df2)","state":"done","pos":6,"type":"cell","end":1514473000526,"id":"6c4443","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"{'kings': Int64Index([5], dtype='int64'), 'Royals': Int64Index([9, 10], dtype='int64'), 'Kings': Int64Index([4, 6, 7], dtype='int64'), 'Devils': Int64Index([2, 3], dtype='int64'), 'Riders': Int64Index([0, 1, 8, 11], dtype='int64')}\n"}},"exec_count":6,"start":1514473000529,"input":"print(df2.groupby('Team').groups)","state":"done","pos":7,"type":"cell","end":1514473000550,"id":"75d9a1","kernel":"anaconda3"}
{"type":"cell","id":"7e1bc1","pos":8,"input":"OK, so this is what the documentation meant when it said \n\n>The abstract definition of grouping is to provide a mapping of labels to group names. \n\nWhen you `groupby` a column, it creates an object that can be thought of as a dictionary mapping the column names to index numbers. Above -- \"Riders\" is the group defined by those entries in the data frame with indices 0,1,8,11. It's like a coloring. \n\nLet's go back and look at the first DataFrame","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.150219</td>\n      <td>0.328424</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.491282</td>\n      <td>-0.396930</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>0.491505</td>\n      <td>-1.811466</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>0.460739</td>\n      <td>0.422627</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.476846</td>\n      <td>-0.393134</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>-1.218327</td>\n      <td>-0.023151</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.018537</td>\n      <td>-1.021760</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-1.571777</td>\n      <td>0.351894</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":7}},"exec_count":7,"start":1514473000554,"input":"df","state":"done","pos":9,"type":"cell","end":1514473000593,"id":"4a5cb3","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"{'bar': Int64Index([1, 3, 5], dtype='int64'), 'foo': Int64Index([0, 2, 4, 6, 7], dtype='int64')}\n"}},"exec_count":8,"start":1514473000595,"input":"print(df.groupby('A').groups)","state":"done","pos":10,"type":"cell","end":1514473000609,"id":"d583e8","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"{('foo', 'three'): Int64Index([7], dtype='int64'), ('bar', 'one'): Int64Index([1], dtype='int64'), ('bar', 'three'): Int64Index([3], dtype='int64'), ('foo', 'one'): Int64Index([0, 6], dtype='int64'), ('foo', 'two'): Int64Index([2, 4], dtype='int64'), ('bar', 'two'): Int64Index([5], dtype='int64')}\n"}},"exec_count":9,"start":1514473000612,"input":"# Grouping using two columns: \n\nprint(df.groupby(['A','B']).groups)\n\n# This treats the two columns like pairs in a Cartesian product. ","state":"done","pos":11,"type":"cell","end":1514473000627,"id":"92da99","kernel":"anaconda3"}
{"type":"cell","id":"400abd","pos":12,"input":"## GroupBy with DataFrames \n\nCan group using a combination of columns and indices","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Points</th>\n      <th>Rank</th>\n      <th>Team</th>\n      <th>Year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>876</td>\n      <td>1</td>\n      <td>Riders</td>\n      <td>2014</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>789</td>\n      <td>2</td>\n      <td>Riders</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>863</td>\n      <td>2</td>\n      <td>Devils</td>\n      <td>2014</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>673</td>\n      <td>3</td>\n      <td>Devils</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>741</td>\n      <td>3</td>\n      <td>Kings</td>\n      <td>2014</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>812</td>\n      <td>4</td>\n      <td>kings</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>756</td>\n      <td>1</td>\n      <td>Kings</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>788</td>\n      <td>1</td>\n      <td>Kings</td>\n      <td>2017</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>694</td>\n      <td>2</td>\n      <td>Riders</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>701</td>\n      <td>4</td>\n      <td>Royals</td>\n      <td>2014</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>804</td>\n      <td>1</td>\n      <td>Royals</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>690</td>\n      <td>2</td>\n      <td>Riders</td>\n      <td>2017</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":12}},"exec_count":12,"start":1514473182596,"input":"df2","state":"done","pos":13,"type":"cell","end":1514473182612,"id":"ed9376","kernel":"anaconda3"}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-83cc2abccc26>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Points'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'1'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroups\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(self, by, axis, level, as_index, sort, group_keys, squeeze, **kwargs)\u001b[0m\n\u001b[1;32m   5160\u001b[0m         return groupby(self, by=by, axis=axis, level=level, as_index=as_index,\n\u001b[1;32m   5161\u001b[0m                        \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_keys\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mgroup_keys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msqueeze\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5162\u001b[0;31m                        **kwargs)\n\u001b[0m\u001b[1;32m   5163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5164\u001b[0m     def asfreq(self, freq, method=None, how=None, normalize=False,\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36mgroupby\u001b[0;34m(obj, by, **kwds)\u001b[0m\n\u001b[1;32m   1841\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'invalid type: %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1842\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1843\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mby\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1844\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1845\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, obj, keys, axis, level, grouper, exclusions, selection, as_index, sort, group_keys, squeeze, **kwargs)\u001b[0m\n\u001b[1;32m    514\u001b[0m                                                     \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    515\u001b[0m                                                     \u001b[0msort\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 516\u001b[0;31m                                                     mutated=self.mutated)\n\u001b[0m\u001b[1;32m    517\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    518\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36m_get_grouper\u001b[0;34m(obj, key, axis, level, sort, mutated, validate)\u001b[0m\n\u001b[1;32m   2924\u001b[0m                 \u001b[0min_axis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2925\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2926\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2927\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGrouper\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mgpr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkey\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2928\u001b[0m             \u001b[0;31m# Add key to exclusions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: '1'"],"evalue":"'1'","ename":"KeyError"}},"exec_count":17,"input":"df2.groupby(['Points', '1']).groups\n\n# This doesn't work and I don't really get it. ","scrolled":true,"state":"done","pos":14,"type":"cell","id":"154a36","kernel":"anaconda3"}
{"type":"cell","id":"1ff19e","pos":15,"input":"## Iterating through groups","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hw_pass</th>\n      <th>hw_e</th>\n      <th>lt_pass</th>\n      <th>lt_e</th>\n      <th>pp_pass</th>\n      <th>pp_e</th>\n      <th>gp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Am</th>\n      <td>5</td>\n      <td>3</td>\n      <td>27</td>\n      <td>17</td>\n      <td>5</td>\n      <td>5</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>Bl</th>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>12</td>\n      <td>3</td>\n      <td>3</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>Br</th>\n      <td>4</td>\n      <td>2</td>\n      <td>26</td>\n      <td>17</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>Co</th>\n      <td>4</td>\n      <td>2</td>\n      <td>21</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>Cr</th>\n      <td>4</td>\n      <td>1</td>\n      <td>23</td>\n      <td>17</td>\n      <td>3</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":19}},"exec_count":19,"start":1514473622890,"input":"grades = pd.read_csv('225-gradebook.csv', index_col=0)\ngrades.head()","state":"done","pos":16,"type":"cell","end":1514473622911,"id":"75304e","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"{0: Index(['Dy', 'Fr', 'Mc', 'St', 'Zi'], dtype='object'),\n 1: Index(['Bl', 'Cr', 'Va'], dtype='object'),\n 2: Index(['Br', 'Co', 'Di', 'Ma', 'Ng'], dtype='object'),\n 3: Index(['Am', 'Du', 'Ga', 'He', 'Sc', 'Ve'], dtype='object'),\n 4: Index(['Fl', 'Li', 'Sh', 'Wa', 'Ya'], dtype='object')}"},"exec_count":20}},"exec_count":20,"input":"# This grouping gives a structure lumping together students that had the same \n# number of E's on homework\n\ngrades.groupby('hw_e').groups","state":"done","pos":17,"type":"cell","id":"596122","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"0\n    hw_pass  hw_e  lt_pass  lt_e  pp_pass  pp_e  gp\nDy        0     0       11     4        1     0  21\nFr        0     0        2     2        0     0   9\nMc        0     0        9     1        2     2  22\nSt        0     0        2     0        0     0  17\nZi        1     0       23    11        3     3  22\n1\n    hw_pass  hw_e  lt_pass  lt_e  pp_pass  pp_e  gp\nBl        2     1       21    12        3     3  18\nCr        4     1       23    17        3     3  20\nVa        3     1       13     4        0     0  20\n2\n    hw_pass  hw_e  lt_pass  lt_e  pp_pass  pp_e  gp\nBr        4     2       26    17        4     4  28\nCo        4     2       21    14        0     0  24\nDi        4     2       26    20        3     3  28\nMa        5     2       24    11        5     5  23\nNg        4     2       23    16        3     3  19\n3\n    hw_pass  hw_e  lt_pass  lt_e  pp_pass  pp_e  gp\nAm        5     3       27    17        5     5  26\nDu        4     3       22    15        4     4  22\nGa        5     3       25    17        5     5  22\nHe        4     3       23    17        3     3  24\nSc        5     3       24    19        4     4  26\nVe        4     3       25    22        3     3  25\n4\n    hw_pass  hw_e  lt_pass  lt_e  pp_pass  pp_e  gp\nFl        5     4       28    24        5     5  24\nLi        5     4       26    17        5     5  19\nSh        4     4       23    15        2     1  25\nWa        5     4       25    22        5     4  25\nYa        5     4       27    21        5     5  25\n"}},"exec_count":23,"start":1514473794483,"input":"# Prints off mini-DataFrames for each attained Homework E level\n\ngrouped = grades.groupby('hw_e')\nfor score, group in grouped:\n    print(score)\n    print(group)","state":"done","pos":18,"type":"cell","end":1514473794525,"id":"b1de1e","kernel":"anaconda3"}
{"output":{"0":{"name":"stdout","text":"The Guided Practice average for group 0 was 18.2\nThe Guided Practice average for group 1 was 19.333333333333332\nThe Guided Practice average for group 2 was 24.4\nThe Guided Practice average for group 3 was 24.166666666666668\nThe Guided Practice average for group 4 was 23.6\n"}},"exec_count":31,"start":1514473954593,"input":"# What were the average Guided Practice scores for students with various \n# levels of E homework grades? \n\nfor score, group in grouped: \n    print(\"The Guided Practice average for group \" + str(score) + \" was \" + str(group.gp.mean()))","state":"done","pos":19,"type":"cell","end":1514473954612,"id":"f835d9","kernel":"anaconda3"}
{"type":"cell","id":"2ee778","pos":20,"input":"## Selecting a group ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gp</th>\n      <th>hw_pass</th>\n      <th>lt_e</th>\n      <th>lt_pass</th>\n      <th>pp_e</th>\n      <th>pp_pass</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bl</th>\n      <td>18</td>\n      <td>2</td>\n      <td>12</td>\n      <td>21</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Cr</th>\n      <td>20</td>\n      <td>4</td>\n      <td>17</td>\n      <td>23</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>Va</th>\n      <td>20</td>\n      <td>3</td>\n      <td>4</td>\n      <td>13</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":33}},"exec_count":33,"start":1514474045792,"input":"grouped.get_group(1)","state":"done","pos":21,"type":"cell","end":1514474045813,"id":"97d22b","kernel":"anaconda3"}
{"type":"cell","id":"3d9f61","pos":22,"input":"## Aggregation","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hw_pass</th>\n      <th>lt_pass</th>\n      <th>lt_e</th>\n      <th>pp_pass</th>\n      <th>pp_e</th>\n      <th>gp</th>\n    </tr>\n    <tr>\n      <th>hw_e</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>47</td>\n      <td>18</td>\n      <td>6</td>\n      <td>5</td>\n      <td>91</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9</td>\n      <td>57</td>\n      <td>33</td>\n      <td>6</td>\n      <td>6</td>\n      <td>58</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21</td>\n      <td>120</td>\n      <td>78</td>\n      <td>15</td>\n      <td>15</td>\n      <td>122</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>27</td>\n      <td>146</td>\n      <td>107</td>\n      <td>24</td>\n      <td>24</td>\n      <td>145</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n      <td>129</td>\n      <td>99</td>\n      <td>22</td>\n      <td>20</td>\n      <td>118</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":34}},"exec_count":34,"start":1514474139722,"input":"grouped.aggregate(np.sum)","state":"done","pos":23,"type":"cell","end":1514474139743,"id":"a075dd","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hw_pass</th>\n      <th>lt_pass</th>\n      <th>lt_e</th>\n      <th>pp_pass</th>\n      <th>pp_e</th>\n      <th>gp</th>\n    </tr>\n    <tr>\n      <th>hw_e</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.2</td>\n      <td>9.400000</td>\n      <td>3.600000</td>\n      <td>1.2</td>\n      <td>1.0</td>\n      <td>18.200000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>19.000000</td>\n      <td>11.000000</td>\n      <td>2.0</td>\n      <td>2.0</td>\n      <td>19.333333</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.2</td>\n      <td>24.000000</td>\n      <td>15.600000</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>24.400000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.5</td>\n      <td>24.333333</td>\n      <td>17.833333</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>24.166667</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.8</td>\n      <td>25.800000</td>\n      <td>19.800000</td>\n      <td>4.4</td>\n      <td>4.0</td>\n      <td>23.600000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":37}},"exec_count":37,"start":1514474185723,"input":"# Gives average scores for all grades in the various Homework-E groupings\n\ngrouped.aggregate(np.mean)","state":"done","pos":24,"type":"cell","end":1514474185746,"id":"5b1089","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f72c41914e0>"},"exec_count":39},"1":{"metadata":{"image/png":{"width":370,"height":264}},"data":{"image/png":"00e5944ad388b51e7ec9f6f7e16304044ecad812"}}},"exec_count":39,"start":1514474292571,"input":"# Can I plot this?\n# Yes, although this isn't the plot I'd want\n\ngrouped.aggregate(np.mean).plot()","state":"done","pos":25,"type":"cell","end":1514474293305,"id":"e439b5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"pandas.core.frame.DataFrame"},"exec_count":43}},"exec_count":43,"start":1514474340183,"input":"# What is this thing anyway?\n# Answer: Just a regular DataFrame, so do what you want with it\n\ntype(grouped.agg(np.mean))","state":"done","pos":26,"type":"cell","end":1514474340200,"id":"bec455","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">gp</th>\n      <th colspan=\"2\" halign=\"left\">hw_pass</th>\n      <th>...</th>\n      <th colspan=\"2\" halign=\"left\">pp_e</th>\n      <th colspan=\"8\" halign=\"left\">pp_pass</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>hw_e</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.0</td>\n      <td>18.200000</td>\n      <td>5.540758</td>\n      <td>9.0</td>\n      <td>17.0</td>\n      <td>21.0</td>\n      <td>22.00</td>\n      <td>22.0</td>\n      <td>5.0</td>\n      <td>0.2</td>\n      <td>...</td>\n      <td>2.00</td>\n      <td>3.0</td>\n      <td>5.0</td>\n      <td>1.2</td>\n      <td>1.303840</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>1.0</td>\n      <td>2.00</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>19.333333</td>\n      <td>1.154701</td>\n      <td>18.0</td>\n      <td>19.0</td>\n      <td>20.0</td>\n      <td>20.00</td>\n      <td>20.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>...</td>\n      <td>3.00</td>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1.732051</td>\n      <td>0.0</td>\n      <td>1.50</td>\n      <td>3.0</td>\n      <td>3.00</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5.0</td>\n      <td>24.400000</td>\n      <td>3.781534</td>\n      <td>19.0</td>\n      <td>23.0</td>\n      <td>24.0</td>\n      <td>28.00</td>\n      <td>28.0</td>\n      <td>5.0</td>\n      <td>4.2</td>\n      <td>...</td>\n      <td>4.00</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>1.870829</td>\n      <td>0.0</td>\n      <td>3.00</td>\n      <td>3.0</td>\n      <td>4.00</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6.0</td>\n      <td>24.166667</td>\n      <td>1.834848</td>\n      <td>22.0</td>\n      <td>22.5</td>\n      <td>24.5</td>\n      <td>25.75</td>\n      <td>26.0</td>\n      <td>6.0</td>\n      <td>4.5</td>\n      <td>...</td>\n      <td>4.75</td>\n      <td>5.0</td>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>0.894427</td>\n      <td>3.0</td>\n      <td>3.25</td>\n      <td>4.0</td>\n      <td>4.75</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>23.600000</td>\n      <td>2.607681</td>\n      <td>19.0</td>\n      <td>24.0</td>\n      <td>25.0</td>\n      <td>25.00</td>\n      <td>25.0</td>\n      <td>5.0</td>\n      <td>4.8</td>\n      <td>...</td>\n      <td>5.00</td>\n      <td>5.0</td>\n      <td>5.0</td>\n      <td>4.4</td>\n      <td>1.341641</td>\n      <td>2.0</td>\n      <td>5.00</td>\n      <td>5.0</td>\n      <td>5.00</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 48 columns</p>\n</div>"},"exec_count":45}},"exec_count":45,"start":1514474424881,"input":"# Gives descriptive stats for each assessment type arranged by HW E score\n\ngrouped.describe()","state":"done","pos":27,"type":"cell","end":1514474425159,"id":"e4d4e1","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>hw_e</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.0</td>\n      <td>1.2</td>\n      <td>1.303840</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>1.0</td>\n      <td>2.00</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>2.0</td>\n      <td>1.732051</td>\n      <td>0.0</td>\n      <td>1.50</td>\n      <td>3.0</td>\n      <td>3.00</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5.0</td>\n      <td>3.0</td>\n      <td>1.870829</td>\n      <td>0.0</td>\n      <td>3.00</td>\n      <td>3.0</td>\n      <td>4.00</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6.0</td>\n      <td>4.0</td>\n      <td>0.894427</td>\n      <td>3.0</td>\n      <td>3.25</td>\n      <td>4.0</td>\n      <td>4.75</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5.0</td>\n      <td>4.4</td>\n      <td>1.341641</td>\n      <td>2.0</td>\n      <td>5.00</td>\n      <td>5.0</td>\n      <td>5.00</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":47}},"exec_count":47,"start":1514474469801,"input":"# Slice in to get one set of stats\n\ngrouped.describe().pp_pass","state":"done","pos":28,"type":"cell","end":1514474469935,"id":"b7a21c","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">hw_pass</th>\n      <th colspan=\"2\" halign=\"left\">lt_pass</th>\n      <th colspan=\"2\" halign=\"left\">lt_e</th>\n      <th colspan=\"2\" halign=\"left\">pp_pass</th>\n      <th colspan=\"2\" halign=\"left\">pp_e</th>\n      <th colspan=\"2\" halign=\"left\">gp</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>mean</th>\n      <th>median</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>mean</th>\n      <th>median</th>\n      <th>mean</th>\n      <th>median</th>\n    </tr>\n    <tr>\n      <th>hw_e</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.2</td>\n      <td>0.0</td>\n      <td>9.400000</td>\n      <td>9.0</td>\n      <td>3.600000</td>\n      <td>2</td>\n      <td>1.2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>18.200000</td>\n      <td>21.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>19.000000</td>\n      <td>21.0</td>\n      <td>11.000000</td>\n      <td>12</td>\n      <td>2.0</td>\n      <td>3</td>\n      <td>2</td>\n      <td>3</td>\n      <td>19.333333</td>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.2</td>\n      <td>4.0</td>\n      <td>24.000000</td>\n      <td>24.0</td>\n      <td>15.600000</td>\n      <td>16</td>\n      <td>3.0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>3</td>\n      <td>24.400000</td>\n      <td>24.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4.5</td>\n      <td>4.5</td>\n      <td>24.333333</td>\n      <td>24.5</td>\n      <td>17.833333</td>\n      <td>17</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>4</td>\n      <td>24.166667</td>\n      <td>24.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4.8</td>\n      <td>5.0</td>\n      <td>25.800000</td>\n      <td>26.0</td>\n      <td>19.800000</td>\n      <td>21</td>\n      <td>4.4</td>\n      <td>5</td>\n      <td>4</td>\n      <td>5</td>\n      <td>23.600000</td>\n      <td>25.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":51}},"exec_count":51,"start":1514474558278,"input":"# Can apply multiple functions for aggregation\n\ngrouped.aggregate([np.mean, np.median])","state":"done","pos":29,"type":"cell","end":1514474558326,"id":"3c8a0d","kernel":"anaconda3"}
{"type":"cell","id":"91de6d","pos":30,"input":"## Transformation","cell_type":"markdown"}
{"exec_count":56,"start":1514474857081,"input":"# Start with a generic time series, first with random numbers and then with the rolling averages \n\nindex = pd.date_range('10/1/1999', periods=1100)\nts = pd.Series(np.random.normal(0.5, 2, 1100), index)\nts = ts.rolling(window=100,min_periods=100).mean().dropna()","state":"done","pos":31,"type":"cell","end":1514474857087,"id":"e848c3","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2000-01-08    0.391951\n2000-01-09    0.362069\n2000-01-10    0.371367\n2000-01-11    0.362755\n2000-01-12    0.367038\nFreq: D, dtype: float64"},"exec_count":57}},"exec_count":57,"start":1514474857585,"input":"ts.head()","state":"done","pos":32,"type":"cell","end":1514474857626,"id":"6e384a","kernel":"anaconda3"}
{"exec_count":58,"start":1514475011298,"input":"# Now transform the data into z-scores using lambdas\n\n# First a lambda that accesses a group\nkey = lambda x: x.year\n\n# Next a lambda that does the transformation \nzscore = lambda x: (x - x.mean()) / x.std()\n\n# Now transform\ntransformed = ts.groupby(key).transform(zscore)\n","state":"done","pos":33,"cell_type":"code","type":"cell","end":1514475011356,"id":"ca7de2","kernel":"anaconda3"}
{"type":"cell","id":"78eeb1","pos":32.5,"input":"","cell_type":"raw"}
{"output":{"0":{"data":{"text/plain":"2000-01-08   -0.607326\n2000-01-09   -0.842266\n2000-01-10   -0.769164\n2000-01-11   -0.836871\n2000-01-12   -0.803201\nFreq: D, dtype: float64"},"exec_count":59}},"exec_count":59,"start":1514475020885,"input":"transformed.head()","state":"done","pos":34,"type":"cell","end":1514475020923,"id":"0bd96d","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2002-09-30   -1.585770\n2002-10-01   -1.333335\n2002-10-02   -0.884297\n2002-10-03   -0.981275\n2002-10-04   -0.935110\nFreq: D, dtype: float64"},"exec_count":60}},"exec_count":60,"start":1514475028178,"input":"transformed.tail()","state":"done","pos":35,"type":"cell","end":1514475028217,"id":"239145","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"-1.1312961889287308e-16"},"exec_count":61}},"exec_count":61,"input":"transformed.mean()  # Should be 0","state":"done","pos":36,"type":"cell","id":"1332cf","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0.9989994994993745"},"exec_count":62}},"exec_count":62,"start":1514475080672,"input":"transformed.std() # Should be 1","state":"done","pos":37,"type":"cell","end":1514475080683,"id":"a984dd","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2000    0.469196\n2001    0.451257\n2002    0.582607\ndtype: float64"},"exec_count":63}},"exec_count":63,"start":1514475118781,"input":"grouped_ts = ts.groupby(key)\ngrouped_ts.mean()","state":"done","pos":38,"type":"cell","end":1514475118812,"id":"892ac4","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2000    0.127189\n2001    0.156722\n2002    0.120752\ndtype: float64"},"exec_count":64}},"exec_count":64,"start":1514475126782,"input":"grouped_ts.std()","state":"done","pos":39,"type":"cell","end":1514475126801,"id":"fba242","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"{0: Index(['Dy', 'Fr', 'Mc', 'St', 'Zi'], dtype='object'),\n 1: Index(['Bl', 'Cr', 'Va'], dtype='object'),\n 2: Index(['Br', 'Co', 'Di', 'Ma', 'Ng'], dtype='object'),\n 3: Index(['Am', 'Du', 'Ga', 'He', 'Sc', 'Ve'], dtype='object'),\n 4: Index(['Fl', 'Li', 'Sh', 'Wa', 'Ya'], dtype='object')}"},"exec_count":77}},"exec_count":77,"start":1514475851005,"input":"# Now try it with grades \n# Split the grades up by HW E and then transform GP scores to z-scores\n\nhwe = grades.groupby('hw_e')\nhwe.groups","state":"done","pos":40,"type":"cell","end":1514475851050,"id":"530251","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"{0: Index(['Dy', 'Fr', 'Mc', 'St', 'Zi'], dtype='object'),\n 1: Index(['Bl', 'Cr', 'Va'], dtype='object'),\n 2: Index(['Br', 'Co', 'Di', 'Ma', 'Ng'], dtype='object'),\n 3: Index(['Am', 'Du', 'Ga', 'He', 'Sc', 'Ve'], dtype='object'),\n 4: Index(['Fl', 'Li', 'Sh', 'Wa', 'Ya'], dtype='object')}"},"exec_count":72}},"exec_count":72,"start":1514475567679,"input":"hwe.groups","state":"done","pos":41,"type":"cell","end":1514475567703,"id":"b12986","kernel":"anaconda3"}
{"exec_count":78,"start":1514475898877,"input":"# Hmm... keep working on it. ","state":"done","pos":42,"type":"cell","end":1514475898881,"id":"02607e","kernel":"anaconda3"}
{"type":"cell","id":"df0a88","pos":43,"input":"## Filtration","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"{0: Index(['Dy', 'Fr', 'Mc', 'St', 'Zi'], dtype='object'),\n 1: Index(['Bl', 'Cr', 'Va'], dtype='object'),\n 2: Index(['Br', 'Co', 'Di', 'Ma', 'Ng'], dtype='object'),\n 3: Index(['Am', 'Du', 'Ga', 'He', 'Sc', 'Ve'], dtype='object'),\n 4: Index(['Fl', 'Li', 'Sh', 'Wa', 'Ya'], dtype='object')}"},"exec_count":81}},"exec_count":81,"start":1514475945689,"input":"hwe.groups","state":"done","pos":44,"type":"cell","end":1514475945698,"id":"fe9037","kernel":"anaconda3"}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-82-53db66e2b450>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhwe\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/groupby.py\u001b[0m in \u001b[0;36mfilter\u001b[0;34m(self, func, dropna, *args, **kwargs)\u001b[0m\n\u001b[1;32m   4203\u001b[0m                 raise TypeError(\"filter function returned a %s, \"\n\u001b[1;32m   4204\u001b[0m                                 \u001b[0;34m\"but expected a scalar bool\"\u001b[0m \u001b[0;34m%\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4205\u001b[0;31m                                 type(res).__name__)\n\u001b[0m\u001b[1;32m   4206\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4207\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_apply_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdropna\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: filter function returned a DataFrame, but expected a scalar bool"],"evalue":"filter function returned a DataFrame, but expected a scalar bool","ename":"TypeError"}},"exec_count":82,"start":1514475985673,"input":"hwe.filter(lambda x: x > 5)","state":"done","pos":45,"type":"cell","end":1514475985722,"id":"cb6646","kernel":"anaconda3"}
{"type":"cell","id":"df5b45","pos":46,"input":""}