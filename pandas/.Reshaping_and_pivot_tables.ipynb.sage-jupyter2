{"type":"settings","backend_state":"running","trust":true,"kernel":"anaconda3","kernel_usage":{"cpu":0,"memory":125759488},"kernel_state":"idle"}
{"type":"file","last_load":1515010167655}
{"exec_count":1,"start":1515010189757,"input":"import pandas as pd\nimport numpy as np","state":"done","pos":0,"type":"cell","end":1515010190694,"id":"9f47a2","kernel":"anaconda3"}
{"exec_count":2,"start":1515010206954,"input":"# Generate the fake data frame in the docs\n\nimport pandas.util.testing as tm; tm.N = 3\ndef unpivot(frame):\n    N, K = frame.shape\n    data = {'value' : frame.values.ravel('F'),\n            'variable' : np.asarray(frame.columns).repeat(N),\n            'date' : np.tile(np.asarray(frame.index), K)}\n    return pd.DataFrame(data, columns=['date', 'variable', 'value'])\ndf = unpivot(tm.makeTimeDataFrame())","state":"done","pos":1,"type":"cell","end":1515010206966,"id":"a6e6ab","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-01-03</td>\n      <td>A</td>\n      <td>0.569177</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-01-04</td>\n      <td>A</td>\n      <td>-1.028912</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-01-05</td>\n      <td>A</td>\n      <td>-0.501496</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2000-01-03</td>\n      <td>B</td>\n      <td>-0.519812</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000-01-04</td>\n      <td>B</td>\n      <td>-1.937672</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2000-01-05</td>\n      <td>B</td>\n      <td>-2.248196</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2000-01-03</td>\n      <td>C</td>\n      <td>-1.038492</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2000-01-04</td>\n      <td>C</td>\n      <td>-0.772837</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2000-01-05</td>\n      <td>C</td>\n      <td>-0.928293</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2000-01-03</td>\n      <td>D</td>\n      <td>0.675160</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2000-01-04</td>\n      <td>D</td>\n      <td>0.900000</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2000-01-05</td>\n      <td>D</td>\n      <td>0.022340</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":5}},"exec_count":5,"start":1515010224049,"input":"df","state":"done","pos":2,"type":"cell","end":1515010224083,"id":"c3b1ab","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-01-03</td>\n      <td>A</td>\n      <td>0.569177</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-01-04</td>\n      <td>A</td>\n      <td>-1.028912</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-01-05</td>\n      <td>A</td>\n      <td>-0.501496</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":8}},"exec_count":8,"start":1515010275653,"input":"# Select out everything for variable A \n\ndf[df['variable'] == 'A']","state":"done","pos":3,"type":"cell","end":1515010275666,"id":"4f4336","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>variable</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000-01-03</th>\n      <td>0.569177</td>\n      <td>-0.519812</td>\n      <td>-1.038492</td>\n      <td>0.67516</td>\n    </tr>\n    <tr>\n      <th>2000-01-04</th>\n      <td>-1.028912</td>\n      <td>-1.937672</td>\n      <td>-0.772837</td>\n      <td>0.90000</td>\n    </tr>\n    <tr>\n      <th>2000-01-05</th>\n      <td>-0.501496</td>\n      <td>-2.248196</td>\n      <td>-0.928293</td>\n      <td>0.02234</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":10}},"exec_count":10,"start":1515010396567,"input":"df.pivot(index='date', columns='variable', values ='value')","state":"done","pos":3.5,"type":"cell","end":1515010396577,"id":"37643c","kernel":"anaconda3"}
{"type":"cell","id":"f07492","pos":3.25,"input":"That allows me to look at the values for `A`, but suppose I wanted a time series with the different variables in the columns? That calls for a **pivot table**. ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"4\" halign=\"left\">value</th>\n    </tr>\n    <tr>\n      <th>variable</th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000-01-03</th>\n      <td>0.569177</td>\n      <td>-0.519812</td>\n      <td>-1.038492</td>\n      <td>0.67516</td>\n    </tr>\n    <tr>\n      <th>2000-01-04</th>\n      <td>-1.028912</td>\n      <td>-1.937672</td>\n      <td>-0.772837</td>\n      <td>0.90000</td>\n    </tr>\n    <tr>\n      <th>2000-01-05</th>\n      <td>-0.501496</td>\n      <td>-2.248196</td>\n      <td>-0.928293</td>\n      <td>0.02234</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":11}},"exec_count":11,"start":1515010439774,"input":"# What happens if you leave off the `values` attribute\n\ndf.pivot(index='date', columns='variable')","state":"done","pos":4.5,"type":"cell","end":1515010439792,"id":"464dd4","kernel":"anaconda3"}
{"type":"cell","id":"8c22ff","pos":5.5,"input":"## Stacking and unstacking","cell_type":"markdown"}
{"type":"cell","id":"7b2847","pos":2.5,"input":"## Pivot tables","cell_type":"markdown"}
{"exec_count":13,"start":1515010625957,"input":"tuples = list(zip(*[['bar', 'bar', 'baz', 'baz',\n                        'foo', 'foo', 'qux', 'qux'],\n                       ['one', 'two', 'one', 'two',\n                        'one', 'two', 'one', 'two']]))\n\nindex = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])\ndf = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])\ndf2 = df[:4]","state":"done","pos":6.5,"type":"cell","end":1515010625959,"id":"1f4080","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n    <tr>\n      <th>first</th>\n      <th>second</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">bar</th>\n      <th>one</th>\n      <td>-1.310992</td>\n      <td>-0.083056</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>0.319598</td>\n      <td>-1.731091</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">baz</th>\n      <th>one</th>\n      <td>1.027200</td>\n      <td>-1.203994</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>-0.402712</td>\n      <td>-0.049354</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":14}},"exec_count":14,"start":1515010629453,"input":"df2","state":"done","pos":7.5,"type":"cell","end":1515010629465,"id":"022a02","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"first  second   \nbar    one     A   -1.310992\n               B   -0.083056\n       two     A    0.319598\n               B   -1.731091\nbaz    one     A    1.027200\n               B   -1.203994\n       two     A   -0.402712\n               B   -0.049354\ndtype: float64"},"exec_count":17}},"exec_count":17,"start":1515010681960,"input":"# .stack() pivots the column variables into a new set of row labels\n\nstacked = df2.stack()\nstacked","state":"done","pos":8.5,"type":"cell","end":1515010681972,"id":"d40ad8","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n    <tr>\n      <th>first</th>\n      <th>second</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">bar</th>\n      <th>one</th>\n      <td>-1.310992</td>\n      <td>-0.083056</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>0.319598</td>\n      <td>-1.731091</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">baz</th>\n      <th>one</th>\n      <td>1.027200</td>\n      <td>-1.203994</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>-0.402712</td>\n      <td>-0.049354</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":18}},"exec_count":18,"input":"# Takes it back to unpivoted form\n\nstacked.unstack()","state":"done","pos":9.5,"type":"cell","id":"784a1a","kernel":"anaconda3"}
{"type":"cell","id":"dd79e4","pos":10.5,"input":"## Melting","cell_type":"markdown"}
{"exec_count":19,"start":1515011192848,"input":"cheese = pd.DataFrame({'first' : ['John', 'Mary'],\n                       'last' : ['Doe', 'Bo'],\n                       'height' : [5.5, 6.0],\n                       'weight' : [130, 150]})","state":"done","pos":11.5,"type":"cell","end":1515011192852,"id":"8aa9a1","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>first</th>\n      <th>height</th>\n      <th>last</th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>5.5</td>\n      <td>Doe</td>\n      <td>130</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mary</td>\n      <td>6.0</td>\n      <td>Bo</td>\n      <td>150</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":20}},"exec_count":20,"start":1515011195620,"input":"cheese","state":"done","pos":12.5,"type":"cell","end":1515011195624,"id":"31ac20","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>first</th>\n      <th>last</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>Doe</td>\n      <td>height</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mary</td>\n      <td>Bo</td>\n      <td>height</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>John</td>\n      <td>Doe</td>\n      <td>weight</td>\n      <td>130.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Mary</td>\n      <td>Bo</td>\n      <td>weight</td>\n      <td>150.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":21}},"exec_count":21,"start":1515011322570,"input":"cheese.melt(id_vars=['first', 'last'])","state":"done","pos":13.5,"type":"cell","end":1515011322593,"id":"795cb4","kernel":"anaconda3"}
{"type":"cell","id":"a7d8ee","pos":14.5,"input":"What just happened: \n    \n- The `id_vars` changed from column variables to identifier variables\n- The new variable `variable` was introduced and is set to equal either `height` or `weight` -- i.e. those two column variables are now on the _inside_ of the table collected under the heading `variable`, and their values paired off ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>first</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>height</td>\n      <td>5.5</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Mary</td>\n      <td>height</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>John</td>\n      <td>last</td>\n      <td>Doe</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Mary</td>\n      <td>last</td>\n      <td>Bo</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>John</td>\n      <td>weight</td>\n      <td>130</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Mary</td>\n      <td>weight</td>\n      <td>150</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":22}},"exec_count":22,"start":1515011476366,"input":"# What if just one id_var?\n\ncheese.melt(id_vars='first')","state":"done","pos":15.5,"type":"cell","end":1515011476392,"id":"c35e83","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>height</th>\n      <th>weight</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>5.5</td>\n      <td>130</td>\n      <td>first</td>\n      <td>John</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6.0</td>\n      <td>150</td>\n      <td>first</td>\n      <td>Mary</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5.5</td>\n      <td>130</td>\n      <td>last</td>\n      <td>Doe</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6.0</td>\n      <td>150</td>\n      <td>last</td>\n      <td>Bo</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":23}},"exec_count":23,"start":1515011513627,"input":"# What if different id_vars?\n\ncheese.melt(id_vars=['height', 'weight'])","state":"done","pos":16.5,"type":"cell","end":1515011513674,"id":"9d5cbf","kernel":"anaconda3"}
{"type":"cell","id":"d51f29","pos":17.5,"input":"Metaphor: We are \"melting down\" the DataFrame into its component parts and rearranging the parts. \n\n`id_vars` tells `.melt()` how to organize the frame, which component parts we are focusing on. ","cell_type":"markdown"}
{"type":"cell","id":"3f388d","pos":18.5,"input":"## Pivot tables","cell_type":"markdown"}
{"type":"cell","id":"7229bd","pos":19.5,"input":"**Difference between `pivot` and `pivot_table`:** `pivot_table` is a generalization of `pivot`. It should be used whenever there is a duplicate value for an index/column pair. \n\nExample from https://hackernoon.com/reshaping-data-in-python-fa27dda2ff77:","cell_type":"markdown"}
{"exec_count":34,"start":1515013292151,"input":"acc = pd.read_csv('accounts.csv')","state":"done","pos":20.5,"type":"cell","end":1515013292155,"id":"897c12","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>person</th>\n      <th>dollars</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2000-01-03</td>\n      <td>Michael</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000-01-03</td>\n      <td>George</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2000-01-03</td>\n      <td>Lisa</td>\n      <td>450.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2000-01-04</td>\n      <td>Michael</td>\n      <td>180.5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000-01-04</td>\n      <td>George</td>\n      <td>450.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2000-01-04</td>\n      <td>Lisa</td>\n      <td>448.0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2000-01-05</td>\n      <td>Michael</td>\n      <td>177.0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2000-01-05</td>\n      <td>George</td>\n      <td>420.0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2000-01-05</td>\n      <td>Lisa</td>\n      <td>447.0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>2000-01-06</td>\n      <td>Michael</td>\n      <td>150.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>2000-01-06</td>\n      <td>George</td>\n      <td>300.0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2000-01-06</td>\n      <td>Lisa</td>\n      <td>344.6</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":32}},"exec_count":32,"start":1515013274853,"input":"acc","state":"done","pos":21.5,"type":"cell","end":1515013274875,"id":"eecedd","kernel":"anaconda3"}
{"type":"cell","id":"f435b0","pos":22.5,"input":"This is \"stacked\" in the sense that the observations are all stacked on top of each other. Suppose we want to \"unstack\" this and turn it into a time series where each individual is a column:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>person</th>\n      <th>George</th>\n      <th>Lisa</th>\n      <th>Michael</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000-01-03</th>\n      <td>500.0</td>\n      <td>450.0</td>\n      <td>200.0</td>\n    </tr>\n    <tr>\n      <th>2000-01-04</th>\n      <td>450.0</td>\n      <td>448.0</td>\n      <td>180.5</td>\n    </tr>\n    <tr>\n      <th>2000-01-05</th>\n      <td>420.0</td>\n      <td>447.0</td>\n      <td>177.0</td>\n    </tr>\n    <tr>\n      <th>2000-01-06</th>\n      <td>300.0</td>\n      <td>344.6</td>\n      <td>150.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":36}},"exec_count":36,"start":1515013296449,"input":"acc.pivot(index='date', columns='person', values='dollars')","state":"done","pos":23.5,"type":"cell","end":1515013296475,"id":"2ff8c0","kernel":"anaconda3"}
{"type":"cell","id":"dc4245","pos":24.5,"input":"This is now \"unstacked\" -- individual observations are no longer stacked on top of each other. \n\nNow look at this data frame:","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"Index(['date', 'person', 'dollars'], dtype='object')"},"exec_count":35}},"exec_count":35,"start":1515013294449,"input":"acc.columns","state":"done","pos":23,"type":"cell","end":1515013294466,"id":"b0b263","kernel":"anaconda3"}
{"exec_count":37,"start":1515013523251,"input":"dfc = pd.read_csv('cookies.csv')","state":"done","pos":25.5,"type":"cell","end":1515013523259,"id":"f56272","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>cookies_sold</th>\n      <th>date</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>2000–01–01</td>\n      <td>George</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>2000–01–01</td>\n      <td>Michael</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>2000–01–01</td>\n      <td>Lisa</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>2000–01–01</td>\n      <td>George</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>2000–01–01</td>\n      <td>Lisa</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":38}},"exec_count":38,"start":1515013524876,"input":"dfc","state":"done","pos":26.5,"type":"cell","end":1515013524898,"id":"b2f1d2","kernel":"anaconda3"}
{"type":"cell","id":"6caa5a","pos":27.5,"input":"We can't `pivot` this around dates with names in the columns, because the entry for row \"2000-01-01\" column \"George\" has two entries, 1 and 2. (Similarly with Lisa.)","cell_type":"markdown"}
{"output":{"0":{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-40-52495e33a0f7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m dfc.pivot(index='date',\n\u001b[1;32m      2\u001b[0m                        \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m                        values='cookies_sold')\n\u001b[0m","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mpivot\u001b[0;34m(self, index, columns, values)\u001b[0m\n\u001b[1;32m   4380\u001b[0m         \"\"\"\n\u001b[1;32m   4381\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpivot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4382\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mpivot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4383\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4384\u001b[0m     _shared_docs['pivot_table'] = \"\"\"\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/reshape/reshape.py\u001b[0m in \u001b[0;36mpivot\u001b[0;34m(self, index, columns, values)\u001b[0m\n\u001b[1;32m    387\u001b[0m         indexed = Series(self[values].values,\n\u001b[1;32m    388\u001b[0m                          index=MultiIndex.from_arrays([index, self[columns]]))\n\u001b[0;32m--> 389\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mindexed\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/series.py\u001b[0m in \u001b[0;36munstack\u001b[0;34m(self, level, fill_value)\u001b[0m\n\u001b[1;32m   2222\u001b[0m         \"\"\"\n\u001b[1;32m   2223\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0munstack\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2224\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0munstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfill_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2225\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2226\u001b[0m     \u001b[0;31m# ----------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/reshape/reshape.py\u001b[0m in \u001b[0;36munstack\u001b[0;34m(obj, level, fill_value)\u001b[0m\n\u001b[1;32m    472\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    473\u001b[0m         unstacker = _Unstacker(obj.values, obj.index, level=level,\n\u001b[0;32m--> 474\u001b[0;31m                                fill_value=fill_value)\n\u001b[0m\u001b[1;32m    475\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0munstacker\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    476\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/reshape/reshape.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, values, index, level, value_columns, fill_value)\u001b[0m\n\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_sorted_values_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_selectors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_sorted_values_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/anaconda3/lib/python3.5/site-packages/pandas/core/reshape/reshape.py\u001b[0m in \u001b[0;36m_make_selectors\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 154\u001b[0;31m             raise ValueError('Index contains duplicate entries, '\n\u001b[0m\u001b[1;32m    155\u001b[0m                              'cannot reshape')\n\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Index contains duplicate entries, cannot reshape"],"ename":"ValueError","evalue":"Index contains duplicate entries, cannot reshape"}},"exec_count":40,"start":1515013586066,"input":"dfc.pivot(index='date',\n                       columns='name',\n                       values='cookies_sold')","state":"done","pos":28.5,"type":"cell","end":1515013586123,"id":"59fca9","kernel":"anaconda3"}
{"exec_count":41,"input":"So instead we have to use `pivot_table` which uses an aggregator to handle the multiple entries. We can make it aggregate by mean, median, etc. ","state":"done","pos":29.5,"cell_type":"markdown","type":"cell","id":"3aee74","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>name</th>\n      <th>George</th>\n      <th>Lisa</th>\n      <th>Michael</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000–01–01</th>\n      <td>1.5</td>\n      <td>3.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":42}},"exec_count":42,"start":1515013756780,"input":"# The default aggregator is the mean: \n\ndfc.pivot_table(index='date',\n                             columns='name',\n                             values='cookies_sold')","state":"done","pos":30.5,"type":"cell","end":1515013756834,"id":"b6c294","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>name</th>\n      <th>George</th>\n      <th>Lisa</th>\n      <th>Michael</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2000–01–01</th>\n      <td>3</td>\n      <td>7</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":44}},"exec_count":44,"start":1515013831365,"input":"# We can switch that up though: \n\ndfc.pivot_table(index=\"date\", columns=\"name\", values=\"cookies_sold\", aggfunc='sum')","state":"done","pos":31.5,"type":"cell","end":1515013831440,"id":"04506f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>cookies_sold</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n    <tr>\n      <th>name</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>George</th>\n      <td>2000–01–01</td>\n      <td>2000–01–01</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>Lisa</th>\n      <td>None</td>\n      <td>None</td>\n      <td>2000–01–01</td>\n      <td>2000–01–01</td>\n    </tr>\n    <tr>\n      <th>Michael</th>\n      <td>None</td>\n      <td>None</td>\n      <td>2000–01–01</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":46}},"exec_count":46,"start":1515014394035,"input":"# We can pivot this table in some cases\n# This doesn't throw errors but there's a lot of missing data\n\ndfc.pivot(index='name', columns='cookies_sold', values='date')","state":"done","pos":32.5,"type":"cell","end":1515014394069,"id":"6766c6","kernel":"anaconda3"}