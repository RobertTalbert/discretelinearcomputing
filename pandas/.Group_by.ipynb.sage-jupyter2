{"type":"settings","backend_state":"running","trust":true,"kernel":"anaconda3","kernel_usage":{"cpu":0,"memory":106786816},"kernel_state":"idle"}
{"type":"file","last_load":1514315738883}
{"type":"cell","id":"b8726a","pos":0,"input":"# Group by\n\nThis refers to three ways of manipulating data:\n\n- **Splitting** data into groups based on some criteria\n- **Applying** a function to each group independently\n- **Combining** results into a data structure\n\nSeveral things could happen in Applying: \n\n- Aggregation -- Computing summary stats on each group\n- Transformation -- Performing a computation on each group to return a like-indexed but changed group, e.g. normalizing data or filling in NA's\n- Filtration -- Discarding some groups according to a computation that evaluates True or False \n- Some combination of these \n\n\n## Splitting an object into groups \n\nObjects can be split by axes. ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.553820</td>\n      <td>0.633548</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.024034</td>\n      <td>0.104126</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>1.238403</td>\n      <td>-0.184995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>-0.491016</td>\n      <td>-1.616213</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.099737</td>\n      <td>-0.174135</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>0.481952</td>\n      <td>-0.978214</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.560719</td>\n      <td>0.912002</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-0.266570</td>\n      <td>0.255826</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":2}},"exec_count":2,"start":1514316567139,"input":"df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],\n                   'B' : ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],\n                   'C' : np.random.randn(8), \n                   'D' : np.random.randn(8)})\ndf","state":"done","pos":1,"type":"cell","end":1514316567162,"id":"30cc91","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<pandas.core.groupby.DataFrameGroupBy object at 0x7fbfce08f550>"},"exec_count":3}},"exec_count":3,"start":1514316567172,"input":"grouped1 = df.groupby('A')\ngrouped1","state":"done","pos":2,"type":"cell","end":1514316567194,"id":"8b7839","kernel":"anaconda3"}
{"exec_count":1,"start":1514316566695,"input":"import pandas as pd\nimport numpy as np","state":"done","pos":-1,"type":"cell","end":1514316567119,"id":"178875","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.553820</td>\n      <td>0.633548</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.024034</td>\n      <td>0.104126</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>1.238403</td>\n      <td>-0.184995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>-0.491016</td>\n      <td>-1.616213</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.099737</td>\n      <td>-0.174135</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>0.481952</td>\n      <td>-0.978214</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.560719</td>\n      <td>0.912002</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-0.266570</td>\n      <td>0.255826</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":4}},"exec_count":4,"start":1514316567205,"input":"# Hmm. I'm not seeing what actually happened when we grouped. \n\ngrouped1.head()","state":"done","pos":3,"type":"cell","end":1514316567231,"id":"dd81ba","kernel":"anaconda3"}
{"output":{"0":{"text":"    Points  Rank    Team  Year\n0      876     1  Riders  2014\n1      789     2  Riders  2015\n2      863     2  Devils  2014\n3      673     3  Devils  2015\n4      741     3   Kings  2014\n5      812     4   kings  2015\n6      756     1   Kings  2016\n7      788     1   Kings  2017\n8      694     2  Riders  2016\n9      701     4  Royals  2014\n10     804     1  Royals  2015\n11     690     2  Riders  2017\n","name":"stdout"}},"exec_count":5,"start":1514316567235,"input":"# Another example from https://www.tutorialspoint.com/python_pandas/python_pandas_groupby.htm \n\nipl_data = {'Team': ['Riders', 'Riders', 'Devils', 'Devils', 'Kings',\n         'kings', 'Kings', 'Kings', 'Riders', 'Royals', 'Royals', 'Riders'],\n         'Rank': [1, 2, 2, 3, 3,4 ,1 ,1,2 , 4,1,2],\n         'Year': [2014,2015,2014,2015,2014,2015,2016,2017,2016,2014,2015,2017],\n         'Points':[876,789,863,673,741,812,756,788,694,701,804,690]}\ndf2 = pd.DataFrame(ipl_data)\n\nprint(df2)","state":"done","pos":6,"type":"cell","end":1514316567275,"id":"6c4443","kernel":"anaconda3"}
{"output":{"0":{"text":"{'Devils': Int64Index([2, 3], dtype='int64'), 'Kings': Int64Index([4, 6, 7], dtype='int64'), 'kings': Int64Index([5], dtype='int64'), 'Riders': Int64Index([0, 1, 8, 11], dtype='int64'), 'Royals': Int64Index([9, 10], dtype='int64')}\n","name":"stdout"}},"exec_count":6,"start":1514316567281,"input":"print(df2.groupby('Team').groups)","state":"done","pos":7,"type":"cell","end":1514316567293,"id":"75d9a1","kernel":"anaconda3"}
{"type":"cell","id":"7e1bc1","pos":8,"input":"OK, so this is what the documentation meant when it said \n\n>The abstract definition of grouping is to provide a mapping of labels to group names. \n\nWhen you `groupby` a column, it creates an object that can be thought of as a dictionary mapping the column names to index numbers. Above -- \"Riders\" is the group defined by those entries in the data frame with indices 0,1,8,11. It's like a coloring. \n\nLet's go back and look at the first DataFrame","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.553820</td>\n      <td>0.633548</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>0.024034</td>\n      <td>0.104126</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>1.238403</td>\n      <td>-0.184995</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>-0.491016</td>\n      <td>-1.616213</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.099737</td>\n      <td>-0.174135</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>0.481952</td>\n      <td>-0.978214</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.560719</td>\n      <td>0.912002</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-0.266570</td>\n      <td>0.255826</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":7}},"exec_count":7,"start":1514316567304,"input":"df","state":"done","pos":9,"type":"cell","end":1514316567323,"id":"4a5cb3","kernel":"anaconda3"}
{"output":{"0":{"text":"{'bar': Int64Index([1, 3, 5], dtype='int64'), 'foo': Int64Index([0, 2, 4, 6, 7], dtype='int64')}\n","name":"stdout"}},"exec_count":8,"start":1514316567334,"input":"print(df.groupby('A').groups)","state":"done","pos":10,"type":"cell","end":1514316567343,"id":"d583e8","kernel":"anaconda3"}
{"output":{"0":{"text":"{('bar', 'two'): Int64Index([5], dtype='int64'), ('bar', 'one'): Int64Index([1], dtype='int64'), ('bar', 'three'): Int64Index([3], dtype='int64'), ('foo', 'two'): Int64Index([2, 4], dtype='int64'), ('foo', 'one'): Int64Index([0, 6], dtype='int64'), ('foo', 'three'): Int64Index([7], dtype='int64')}\n","name":"stdout"}},"exec_count":10,"start":1514316648680,"input":"# Grouping using two columns: \n\nprint(df.groupby(['A','B']).groups)\n\n# This treats the two columns like pairs in a Cartesian product. ","state":"done","pos":11,"type":"cell","end":1514316648705,"id":"92da99","kernel":"anaconda3"}
{"type":"cell","id":"400abd","pos":12,"input":""}