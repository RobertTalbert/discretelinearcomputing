{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"kernel_usage":{"cpu":0,"memory":96231424},"kernel_state":"idle"}
{"type":"file","last_load":1515174749769}
{"exec_count":1,"start":1515176807323,"input":"import pandas as pd\nimport numpy as np","state":"done","pos":0,"type":"cell","end":1515176807822,"id":"a44494","kernel":"anaconda3"}
{"type":"cell","id":"011f72","pos":1,"input":"# IO Tools \n\nI've been using the basic IO tools for a while now, especially `.read_csv()`. Here I will just explore some of the features I've been wondering about. \n\nParsing dates: Importing some weight data from my personal records...","cell_type":"markdown"}
{"exec_count":2,"start":1515176807843,"input":"df_needsformatting = pd.read_csv('weight.csv')","state":"done","pos":2,"type":"cell","end":1515176807852,"id":"9c91ae","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Dec 17</th>\n      <th>196.0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Dec 18</td>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Dec 19</td>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Dec 20</td>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Dec 21</td>\n      <td>194.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Dec 22</td>\n      <td>196.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":3}},"exec_count":3,"start":1515176807861,"input":"df_needsformatting.head()","state":"done","pos":3,"type":"cell","end":1515176807886,"id":"2a574e","kernel":"anaconda3"}
{"type":"cell","id":"06a9c1","pos":4,"input":"What I want, is to import the data with the date (current first column) as the index and the weight as the one and only column, with the column header \"weight\". ","cell_type":"markdown"}
{"exec_count":4,"start":1515176807893,"input":"df = pd.read_csv('weight.csv', index_col=0, names=[\"weight\"])","state":"done","pos":5,"type":"cell","end":1515176807899,"id":"6a8efa","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dec 17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>Dec 18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>Dec 19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>Dec 20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>Dec 21</th>\n      <td>194.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":5}},"exec_count":5,"start":1515176807909,"input":"df.head()","state":"done","pos":6,"type":"cell","end":1515176807919,"id":"6def86","kernel":"anaconda3"}
{"type":"cell","id":"f03e71","pos":7,"input":"Better, but I now want the index to be Date objects. ","cell_type":"markdown"}
{"exec_count":6,"start":1515176807927,"input":"df2 = pd.read_csv('weight.csv', index_col=0, names=[\"weight\"], parse_dates=True, infer_datetime_format=True)","state":"done","pos":8,"type":"cell","end":1515176807939,"id":"cfe669","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dec 17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>Dec 18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>Dec 19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>Dec 20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>Dec 21</th>\n      <td>194.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":7}},"exec_count":7,"start":1515176807952,"input":"df2.head()","state":"done","pos":9,"type":"cell","end":1515176807963,"id":"b6b338","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"'2017-12-25'"},"exec_count":10}},"exec_count":10,"start":1515176807996,"input":"conv_date('Dec 25')  # It works! ","state":"done","pos":12,"type":"cell","end":1515176808007,"id":"2d462a","kernel":"anaconda3"}
{"exec_count":9,"start":1515176807980,"input":"def conv_date(s):\n    if s[:3] == 'Dec':\n        month = '12'\n    else: \n        month = '01'\n    return '2017-'+month+'-'+s[-2:]","state":"done","pos":9.25,"type":"cell","end":1515176807993,"id":"ecd75d","kernel":"anaconda3"}
{"type":"cell","id":"426df3","pos":9.125,"input":"So it seems like this won't work unless the \"dates\" here are reasonably close to datetime strings in the first place. So I need to convert \"Dec 17\" to 2017-12-27 and so on. Sounds like I need to map a function over the index. \n\nLet's see if I can do this and not worry about the change in year for a second. ","cell_type":"markdown"}
{"output":{"0":{"text":"Jan\n 7\n","name":"stdout"}},"exec_count":8,"start":1515176807972,"input":"# First test out the string locations\n\ns = 'Jan 7'\nprint(s[:3])   # First three characters\nprint(s[-2:])  # Last two characters","state":"done","pos":9.1875,"type":"cell","end":1515176807977,"id":"2cd187","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Index(['2017-12-17', '2017-12-18', '2017-12-19', '2017-12-20', '2017-12-21',\n       '2017-12-22', '2017-12-23', '2017-12-24', '2017-12-25', '2017-12-26',\n       '2017-12-27', '2017-12-28', '2017-12-29', '2017-12-30', '2017-12-31',\n       '2017-01- 1', '2017-01- 2', '2017-01- 3', '2017-01- 4', '2017-01- 5'],\n      dtype='object')"},"exec_count":11}},"exec_count":11,"start":1515176808010,"input":"df.index.map(conv_date)","state":"done","pos":14,"type":"cell","end":1515176808047,"id":"fe7168","kernel":"anaconda3"}
{"type":"cell","id":"0cfdd3","pos":15,"input":"Almost! Only thing is that dates with single digits need a 0. ","cell_type":"markdown"}
{"exec_count":12,"start":1515176808060,"input":"def conv_date(s):\n    if s[:3] == 'Dec':\n        month = '12'\n    else: \n        month = '01'\n    if s[-2] == ' ':\n        day = '0'+s[-1]\n    else:\n        day = s[-2] + s[-1]\n    return '2017-'+month+'-'+day","state":"done","pos":16,"type":"cell","end":1515176808071,"id":"722ea7","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Index(['2017-12-17', '2017-12-18', '2017-12-19', '2017-12-20', '2017-12-21',\n       '2017-12-22', '2017-12-23', '2017-12-24', '2017-12-25', '2017-12-26',\n       '2017-12-27', '2017-12-28', '2017-12-29', '2017-12-30', '2017-12-31',\n       '2017-01-01', '2017-01-02', '2017-01-03', '2017-01-04', '2017-01-05'],\n      dtype='object')"},"exec_count":13}},"exec_count":13,"start":1515176808074,"input":"df.index.map(conv_date)","state":"done","pos":17,"type":"cell","end":1515176808089,"id":"aa9a61","kernel":"anaconda3"}
{"exec_count":14,"start":1515176808092,"input":"# Now replace index with this one\n\ndf.index = df.index.map(conv_date)","state":"done","pos":18,"type":"cell","end":1515176808106,"id":"813ccb","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>2017-12-19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-21</th>\n      <td>194.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":15}},"exec_count":15,"start":1515176808109,"input":"df.head()","state":"done","pos":19,"type":"cell","end":1515176808130,"id":"222975","kernel":"anaconda3"}
{"exec_count":16,"start":1515176808133,"input":"df.index = pd.to_datetime(df.index)","state":"done","pos":20,"type":"cell","end":1515176808156,"id":"b0d52c","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"DatetimeIndex(['2017-12-17', '2017-12-18', '2017-12-19', '2017-12-20',\n               '2017-12-21', '2017-12-22', '2017-12-23', '2017-12-24',\n               '2017-12-25', '2017-12-26', '2017-12-27', '2017-12-28',\n               '2017-12-29', '2017-12-30', '2017-12-31', '2017-01-01',\n               '2017-01-02', '2017-01-03', '2017-01-04', '2017-01-05'],\n              dtype='datetime64[ns]', freq=None)"},"exec_count":17}},"exec_count":17,"start":1515176808160,"input":"df.index","state":"done","pos":21,"type":"cell","end":1515176808179,"id":"f44850","kernel":"anaconda3"}
{"type":"cell","id":"4ab95d","pos":22,"input":"DONE. \n\nI could have done this in fewer lines by chaining: \n\n    df.index = pd.to_datetime(df.index.map(conv_date))\n    \nNow let's start over and do this and correct the year: ","cell_type":"markdown"}
{"exec_count":18,"start":1515176808182,"input":"# Start totally over\ndf = pd.read_csv('weight.csv', index_col=0, names=[\"weight\"]) ","state":"done","pos":24,"type":"cell","end":1515176808201,"id":"7a4364","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Dec 17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>Dec 18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>Dec 19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>Dec 20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>Dec 21</th>\n      <td>194.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":19}},"exec_count":19,"start":1515176808207,"input":"df.head()","state":"done","pos":25,"type":"cell","end":1515176808220,"id":"25e3ae","kernel":"anaconda3"}
{"exec_count":20,"start":1515176808222,"input":"# Updated conv_date: \n\ndef conv_date_new(s):\n    if s[:3] == 'Dec':\n        month = '12'\n        year = '2017'\n    else: \n        month = '01'\n        year = '2018'\n    if s[-2] == ' ':\n        day = '0'+s[-1]\n    else:\n        day = s[-2] + s[-1]\n    return year+'-'+month+'-'+day","state":"done","pos":26,"type":"cell","end":1515176808245,"id":"a6f5ca","kernel":"anaconda3"}
{"output":{"0":{"text":"2018-01-06\n2017-12-25\n","name":"stdout"}},"exec_count":21,"start":1515176808249,"input":"print(conv_date_new('Jan 6'))\nprint(conv_date_new('Dec 25'))","state":"done","pos":27,"type":"cell","end":1515176808263,"id":"a75b73","kernel":"anaconda3"}
{"exec_count":22,"start":1515176808266,"input":"df.index = pd.to_datetime(df.index.map(conv_date_new))","state":"done","pos":28,"type":"cell","end":1515176808277,"id":"c3e1f5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>2017-12-19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-21</th>\n      <td>194.4</td>\n    </tr>\n    <tr>\n      <th>2017-12-22</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-23</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-24</th>\n      <td>196.6</td>\n    </tr>\n    <tr>\n      <th>2017-12-25</th>\n      <td>197.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-26</th>\n      <td>196.4</td>\n    </tr>\n    <tr>\n      <th>2017-12-27</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-28</th>\n      <td>193.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-29</th>\n      <td>192.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-30</th>\n      <td>192.2</td>\n    </tr>\n    <tr>\n      <th>2017-12-31</th>\n      <td>190.4</td>\n    </tr>\n    <tr>\n      <th>2018-01-01</th>\n      <td>191.2</td>\n    </tr>\n    <tr>\n      <th>2018-01-02</th>\n      <td>189.8</td>\n    </tr>\n    <tr>\n      <th>2018-01-03</th>\n      <td>191.0</td>\n    </tr>\n    <tr>\n      <th>2018-01-04</th>\n      <td>190.2</td>\n    </tr>\n    <tr>\n      <th>2018-01-05</th>\n      <td>191.6</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":23}},"exec_count":23,"start":1515176808282,"input":"df","state":"done","pos":30,"type":"cell","end":1515176808303,"id":"068cbf","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7fe8700cb5c0>"},"exec_count":24},"1":{"metadata":{"image/png":{"width":377,"height":272}},"data":{"image/png":"2b45ea46bf4ef93a051a836b5f2b6411b5994cfc"}}},"exec_count":24,"start":1515176808305,"input":"df.plot()","state":"done","pos":31,"type":"cell","end":1515176809127,"id":"1b4d62","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>weight</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2017-12-17</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-18</th>\n      <td>196.2</td>\n    </tr>\n    <tr>\n      <th>2017-12-19</th>\n      <td>195.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-20</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-21</th>\n      <td>194.4</td>\n    </tr>\n    <tr>\n      <th>2017-12-22</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-23</th>\n      <td>196.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-24</th>\n      <td>196.6</td>\n    </tr>\n    <tr>\n      <th>2017-12-25</th>\n      <td>197.0</td>\n    </tr>\n    <tr>\n      <th>2017-12-26</th>\n      <td>196.4</td>\n    </tr>\n    <tr>\n      <th>2017-12-27</th>\n      <td>194.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-28</th>\n      <td>193.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-29</th>\n      <td>192.8</td>\n    </tr>\n    <tr>\n      <th>2017-12-30</th>\n      <td>192.2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":26}},"exec_count":26,"start":1515176867449,"input":"df[df['weight'] > 192]","state":"done","pos":32,"type":"cell","end":1515176867475,"id":"3d2ce9","kernel":"anaconda3"}
{"type":"cell","id":"da83f5","pos":33,"input":"Thinking a little more long term:\n\n- I have a ton of data from weight dating back to Dec 2016. This is a situation where you set up and transform each year or data set separately to handle the years, then `stack` the df's on top of each other. \n- There's probably a regex that can handle the date conversions more efficiently. I should learn more. ","cell_type":"markdown"}
{"type":"cell","id":"40b34b","pos":30.5,"input":"SWEET - now let's play","cell_type":"markdown"}
{"type":"cell","id":"e03103","pos":34,"input":"## Writing out data","cell_type":"markdown"}
{"output":{"0":{"text":"<bound method DataFrame.to_html of             weight\n2017-12-17   196.0\n2017-12-18   196.2\n2017-12-19   195.0\n2017-12-20   194.8\n2017-12-21   194.4\n2017-12-22   196.0\n2017-12-23   196.0\n2017-12-24   196.6\n2017-12-25   197.0\n2017-12-26   196.4\n2017-12-27   194.8\n2017-12-28   193.8\n2017-12-29   192.8\n2017-12-30   192.2\n2017-12-31   190.4\n2018-01-01   191.2\n2018-01-02   189.8\n2018-01-03   191.0\n2018-01-04   190.2\n2018-01-05   191.6>\n","name":"stdout"}},"exec_count":27,"start":1515177403749,"input":"print(df.to_html)","state":"done","pos":35,"type":"cell","end":1515177403778,"id":"c61eb2","kernel":"anaconda3"}
{"output":{"0":{"text":"<bound method DataFrame.to_csv of             weight\n2017-12-17   196.0\n2017-12-18   196.2\n2017-12-19   195.0\n2017-12-20   194.8\n2017-12-21   194.4\n2017-12-22   196.0\n2017-12-23   196.0\n2017-12-24   196.6\n2017-12-25   197.0\n2017-12-26   196.4\n2017-12-27   194.8\n2017-12-28   193.8\n2017-12-29   192.8\n2017-12-30   192.2\n2017-12-31   190.4\n2018-01-01   191.2\n2018-01-02   189.8\n2018-01-03   191.0\n2018-01-04   190.2\n2018-01-05   191.6>\n","name":"stdout"}},"exec_count":28,"start":1515177412553,"input":"print(df.to_csv)","state":"done","pos":36,"type":"cell","end":1515177412584,"id":"011ef8","kernel":"anaconda3"}
{"exec_count":29,"start":1515177427555,"input":"df.to_csv('new_weights.csv')","state":"done","pos":37,"type":"cell","end":1515177427942,"id":"38c41b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"{'weight': {Timestamp('2017-12-17 00:00:00'): 196.0,\n  Timestamp('2017-12-18 00:00:00'): 196.2,\n  Timestamp('2017-12-19 00:00:00'): 195.0,\n  Timestamp('2017-12-20 00:00:00'): 194.8,\n  Timestamp('2017-12-21 00:00:00'): 194.4,\n  Timestamp('2017-12-22 00:00:00'): 196.0,\n  Timestamp('2017-12-23 00:00:00'): 196.0,\n  Timestamp('2017-12-24 00:00:00'): 196.6,\n  Timestamp('2017-12-25 00:00:00'): 197.0,\n  Timestamp('2017-12-26 00:00:00'): 196.4,\n  Timestamp('2017-12-27 00:00:00'): 194.8,\n  Timestamp('2017-12-28 00:00:00'): 193.8,\n  Timestamp('2017-12-29 00:00:00'): 192.8,\n  Timestamp('2017-12-30 00:00:00'): 192.2,\n  Timestamp('2017-12-31 00:00:00'): 190.4,\n  Timestamp('2018-01-01 00:00:00'): 191.2,\n  Timestamp('2018-01-02 00:00:00'): 189.8,\n  Timestamp('2018-01-03 00:00:00'): 191.0,\n  Timestamp('2018-01-04 00:00:00'): 190.2,\n  Timestamp('2018-01-05 00:00:00'): 191.6}}"},"exec_count":30}},"exec_count":30,"start":1515177464542,"input":"df.to_dict()","state":"done","pos":38,"type":"cell","end":1515177464574,"id":"9bca7e","kernel":"anaconda3"}
{"type":"cell","id":"f74df3","pos":39,"input":""}