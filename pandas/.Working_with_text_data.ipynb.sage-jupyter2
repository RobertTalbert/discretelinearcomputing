{"type":"settings","kernel":"anaconda3","backend_state":"running","trust":true,"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":110067712}}
{"type":"file","last_load":1515251512748}
{"exec_count":1,"start":1515251521566,"input":"import pandas as pd\nimport numpy as np","state":"done","pos":0,"type":"cell","end":1515251522565,"id":"da4335","kernel":"anaconda3"}
{"type":"cell","id":"0b4a72","pos":1,"input":"# Working with Text Data\n\nPandas has methods that look and work like the usual string methods, and they are vectorized and ignore missing values.","cell_type":"markdown"}
{"exec_count":2,"start":1515251593348,"input":"s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])","state":"done","pos":2,"type":"cell","end":1515251593352,"id":"9ef77f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object"},"exec_count":3}},"exec_count":3,"start":1515251599279,"input":"s.str.lower()","state":"done","pos":3,"type":"cell","end":1515251599286,"id":"db9147","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0       A\n1       B\n2       C\n3    AABA\n4    BACA\n5     NaN\n6    CABA\n7     DOG\n8     CAT\ndtype: object"},"exec_count":4}},"exec_count":4,"start":1515251606849,"input":"s.str.upper()","state":"done","pos":4,"type":"cell","end":1515251606862,"id":"54ed79","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    1.0\n1    1.0\n2    1.0\n3    4.0\n4    4.0\n5    NaN\n6    4.0\n7    3.0\n8    3.0\ndtype: float64"},"exec_count":5}},"exec_count":5,"start":1515251613647,"input":"s.str.len()","state":"done","pos":5,"type":"cell","end":1515251613659,"id":"9e8fa3","kernel":"anaconda3"}
{"type":"cell","id":"72149b","pos":6,"input":"Can also strip blank spaces out -- this was an issue in an earlier data file. ","cell_type":"markdown"}
{"exec_count":6,"start":1515251711347,"input":"acc = pd.read_csv(\"accounts.csv\")","state":"done","pos":7,"type":"cell","end":1515251711376,"id":"0b984b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Index(['date', ' person', ' dollars'], dtype='object')"},"exec_count":8}},"exec_count":8,"start":1515251729850,"input":"# Note the spaces in the column names\n\nacc.columns","state":"done","pos":8,"type":"cell","end":1515251729859,"id":"3b1c78","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Index(['date', 'person', 'dollars'], dtype='object')"},"exec_count":10}},"exec_count":10,"start":1515251760448,"input":"acc.columns.str.strip()","state":"done","pos":9,"type":"cell","end":1515251760457,"id":"d39f75","kernel":"anaconda3"}
{"exec_count":12,"start":1515251844348,"input":"# This example does a bunch of things: Strip out whitespace, \n# convert to lowercase, replace spaces with underscores. \n\ndf = pd.DataFrame(np.random.randn(3, 2), columns=[' Column A ', ' Column B '], index=range(3))","state":"done","pos":10,"type":"cell","end":1515251844354,"id":"f9f128","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Column A</th>\n      <th>Column B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.787839</td>\n      <td>0.410843</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.429758</td>\n      <td>-0.125425</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.626099</td>\n      <td>-0.169081</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":13}},"exec_count":13,"start":1515251848149,"input":"df","state":"done","pos":11,"type":"cell","end":1515251848160,"id":"5786f4","kernel":"anaconda3"}
{"exec_count":15,"start":1515251892449,"input":"df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')","state":"done","pos":12,"type":"cell","end":1515251892452,"id":"641953","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>column_a</th>\n      <th>column_b</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-0.787839</td>\n      <td>0.410843</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.429758</td>\n      <td>-0.125425</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.626099</td>\n      <td>-0.169081</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":16}},"exec_count":16,"start":1515251894858,"input":"df","state":"done","pos":13,"type":"cell","end":1515251894874,"id":"bf66fb","kernel":"anaconda3"}
{"type":"cell","id":"45a816","pos":14,"input":"**Stopping here because the rest of it involves regular expressions -- need to learn more.**","cell_type":"markdown"}
{"type":"cell","id":"93a471","pos":15,"input":""}