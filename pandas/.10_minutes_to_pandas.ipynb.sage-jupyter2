{"type":"settings","kernel":"anaconda3","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.5.4"}},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":130416640},"trust":true}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.601748</td>\n      <td>1.440776</td>\n      <td>-0.762133</td>\n      <td>1.183353</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.029397</td>\n      <td>1.071071</td>\n      <td>-1.730548</td>\n      <td>-1.077390</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.778522</td>\n      <td>0.182125</td>\n      <td>-0.662679</td>\n      <td>-0.210606</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.596300</td>\n      <td>-0.066206</td>\n      <td>-0.647940</td>\n      <td>1.429423</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.560181</td>\n      <td>-0.667450</td>\n      <td>-0.935205</td>\n      <td>1.118494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.805177</td>\n      <td>0.426803</td>\n      <td>0.474340</td>\n      <td>-0.112722</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1.777205</td>\n      <td>-0.817350</td>\n      <td>0.840929</td>\n      <td>0.367726</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-0.732456</td>\n      <td>0.632114</td>\n      <td>2.569744</td>\n      <td>-0.126201</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.610535</td>\n      <td>0.627630</td>\n      <td>-1.516052</td>\n      <td>-0.455194</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":250}},"exec_count":250,"start":1513802328684,"input":"# Glue them back together by rows \n\npd.concat([piece1, piece2, piece3])","state":"done","pos":62,"cell_type":"code","type":"cell","end":1513802328713,"id":"356173","kernel":"anaconda3"}
{"exec_count":226,"start":1513802327588,"input":"# Setting \n\ns1 = pd.Series([1,2,3,4,5,6], index = pd.date_range('20130102', periods = 6))","state":"done","pos":34,"cell_type":"code","type":"cell","end":1513802327603,"id":"75562c","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>-0.814353</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.211469</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>0.165276</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>0.076713</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>-0.921238</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>-0.269083</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":216}},"exec_count":216,"start":1513802326988,"input":"# Selecting all rows for a list of columns\n\ndf.loc[:, ['A','C']]","state":"done","pos":24,"cell_type":"code","type":"cell","end":1513802327008,"id":"02c1d6","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"A   -0.470961\nB    0.583828\nC   -0.814353\nD    0.627546\nName: 2013-01-01 00:00:00, dtype: float64"},"exec_count":215}},"exec_count":215,"start":1513802326962,"input":"df.loc[dates[0]]\n\n# Note this is a ROW even though it's formatted vertically","state":"done","pos":23,"cell_type":"code","type":"cell","end":1513802326972,"id":"de1f73","kernel":"anaconda3"}
{"type":"file","last_load":1513712876321}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":222}},"exec_count":222,"start":1513802327315,"input":"# Getting a selection of columns + all rows\n\ndf.iloc[:, 2:4]","state":"done","pos":30,"cell_type":"code","type":"cell","end":1513802327400,"id":"f68b55","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Timestamp('2013-01-01 00:00:00', freq='D')"},"exec_count":214}},"exec_count":214,"start":1513802326821,"input":"# Getting cross section using a label\n\ndates[0]","state":"done","pos":22,"cell_type":"code","type":"cell","end":1513802326891,"id":"5e4536","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>NaN</td>\n      <td>0.583828</td>\n      <td>NaN</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>NaN</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>NaN</td>\n      <td>0.076713</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>NaN</td>\n      <td>2.255627</td>\n      <td>NaN</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":225}},"exec_count":225,"start":1513802327518,"input":"# Selecting all values from a DataFrame when a condition is met \n# Puts NaN where appropriate \n\ndf[df > 0]","state":"done","pos":33,"cell_type":"code","type":"cell","end":1513802327559,"id":"652517","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"A           float64\nB    datetime64[ns]\nC           float32\nD             int32\nE          category\nF            object\ndtype: object"},"exec_count":197}},"exec_count":197,"start":1513802325120,"input":"# Take a look at the types of the stuff in df2\n\ndf2.dtypes","state":"done","pos":5,"cell_type":"code","type":"cell","end":1513802325156,"id":"d8ab91","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>A</th>\n      <th>B</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">bar</th>\n      <th>one</th>\n      <td>-2.268854</td>\n      <td>-1.257246</td>\n    </tr>\n    <tr>\n      <th>three</th>\n      <td>0.925018</td>\n      <td>1.152166</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>2.039702</td>\n      <td>-0.254641</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">foo</th>\n      <th>one</th>\n      <td>-1.110790</td>\n      <td>0.475553</td>\n    </tr>\n    <tr>\n      <th>three</th>\n      <td>-1.349095</td>\n      <td>-0.688689</td>\n    </tr>\n    <tr>\n      <th>two</th>\n      <td>-1.506446</td>\n      <td>-1.052204</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":257}},"exec_count":257,"start":1513802329094,"input":"df.groupby(['A','B']).sum()","state":"done","pos":69,"cell_type":"code","type":"cell","end":1513802329152,"id":"d0a1c4","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0.84125948463292621"},"exec_count":262}},"exec_count":262,"start":1513802329321,"input":"df_stack[1]","state":"done","pos":76,"cell_type":"code","type":"cell","end":1513802329340,"id":"b16d8a","kernel":"anaconda3"}
{"type":"cell","id":"1f3908","pos":70,"input":"### Reshaping\n\nStacking: `.stack()` method compresses a data frame in one of its columns","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":209}},"exec_count":209,"start":1513802326595,"input":"# Sort by values in a particular column\n\n# Before: \n\ndf","state":"done","pos":17,"cell_type":"code","type":"cell","end":1513802326616,"id":"ea40f4","kernel":"anaconda3"}
{"exec_count":261,"start":1513802329296,"input":"df_stack = df.stack()","state":"done","pos":74,"cell_type":"code","type":"cell","end":1513802329317,"id":"0a03b5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.601748</td>\n      <td>1.440776</td>\n      <td>-0.762133</td>\n      <td>1.183353</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.029397</td>\n      <td>1.071071</td>\n      <td>-1.730548</td>\n      <td>-1.077390</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.778522</td>\n      <td>0.182125</td>\n      <td>-0.662679</td>\n      <td>-0.210606</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.596300</td>\n      <td>-0.066206</td>\n      <td>-0.647940</td>\n      <td>1.429423</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.560181</td>\n      <td>-0.667450</td>\n      <td>-0.935205</td>\n      <td>1.118494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.805177</td>\n      <td>0.426803</td>\n      <td>0.474340</td>\n      <td>-0.112722</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1.777205</td>\n      <td>-0.817350</td>\n      <td>0.840929</td>\n      <td>0.367726</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-0.732456</td>\n      <td>0.632114</td>\n      <td>2.569744</td>\n      <td>-0.126201</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.610535</td>\n      <td>0.627630</td>\n      <td>-1.516052</td>\n      <td>-0.455194</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":252}},"exec_count":252,"start":1513802328745,"input":"df.append(s)","state":"done","pos":64,"cell_type":"code","type":"cell","end":1513802328793,"id":"36b8ab","kernel":"anaconda3"}
{"type":"cell","id":"683f78","pos":56,"input":"### Merging","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":195}},"exec_count":195,"start":1513802325021,"input":"# Create a DataFrame \n\n# index = dates sets the ROWS to be the dates\n# columns = whatever would name the columns \n\ndates = pd.date_range('20130101', periods = 6)\ndf = pd.DataFrame(np.random.randn(6,4), index=dates, \n                  columns=list('ABCD'))\n\ndf","state":"done","pos":3,"cell_type":"code","type":"cell","end":1513802325070,"id":"cd8ff4","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gp</th>\n    </tr>\n    <tr>\n      <th>hw_pass</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>17.250000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.000000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>20.000000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23.888889</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>23.750000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":269}},"exec_count":269,"start":1513802329696,"input":"# This gives a report of the number of Guided Practices passed according to the number of \n# Homework Sets passed -- the default aggregator is the mean\n\npiv_grades = pd.pivot_table(grades, values = 'gp', index = 'hw_pass')\n\npiv_grades","state":"done","pos":84,"cell_type":"code","type":"cell","end":1513802329755,"id":"bf6ca0","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"-0.21146914335561351"},"exec_count":223}},"exec_count":223,"start":1513802327432,"input":"# Getting a single specific value \n\ndf.iloc[1,2]","state":"done","pos":31,"cell_type":"code","type":"cell","end":1513802327438,"id":"e599fa","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>one</td>\n      <td>x</td>\n      <td>foo</td>\n      <td>0.197520</td>\n      <td>1.216154</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>one</td>\n      <td>y</td>\n      <td>foo</td>\n      <td>0.053168</td>\n      <td>0.074101</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>two</td>\n      <td>z</td>\n      <td>foo</td>\n      <td>-0.487827</td>\n      <td>1.385195</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>three</td>\n      <td>x</td>\n      <td>bar</td>\n      <td>0.203694</td>\n      <td>-0.554314</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>one</td>\n      <td>y</td>\n      <td>bar</td>\n      <td>0.010320</td>\n      <td>-0.351124</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>one</td>\n      <td>z</td>\n      <td>bar</td>\n      <td>0.849129</td>\n      <td>0.862114</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>two</td>\n      <td>x</td>\n      <td>foo</td>\n      <td>2.234928</td>\n      <td>-0.469220</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>three</td>\n      <td>y</td>\n      <td>foo</td>\n      <td>0.915752</td>\n      <td>-0.756218</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>one</td>\n      <td>z</td>\n      <td>foo</td>\n      <td>0.537665</td>\n      <td>1.597836</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>one</td>\n      <td>x</td>\n      <td>bar</td>\n      <td>-0.693212</td>\n      <td>0.496945</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>two</td>\n      <td>y</td>\n      <td>bar</td>\n      <td>-0.257801</td>\n      <td>-0.104396</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>three</td>\n      <td>z</td>\n      <td>bar</td>\n      <td>-0.074950</td>\n      <td>0.149621</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":265}},"exec_count":265,"start":1513802329502,"input":"df","state":"done","pos":80,"cell_type":"code","type":"cell","end":1513802329553,"id":"2a4410","kernel":"anaconda3"}
{"type":"cell","id":"c80053","pos":48,"input":"### Statistics","cell_type":"markdown"}
{"output":{"0":{"data":{"text/plain":"Index(['A', 'B', 'C', 'D'], dtype='object')"},"exec_count":201}},"exec_count":201,"start":1513802325336,"input":"# Get columns \n\ndf.columns","state":"done","pos":9,"cell_type":"code","type":"cell","end":1513802325347,"id":"950641","kernel":"anaconda3"}
{"type":"cell","id":"78c859","pos":78,"input":"Pivot tables: A _pivot table_ is a report obtained from a spreadsheet/DataFrame that summarizes the data found in the frame. The term \"pivot\" just refers to \"picking up\" a table and turning it around to look at it in a different way. ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>pp_pass</th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n    </tr>\n    <tr>\n      <th>hw_pass</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2.0</td>\n      <td>11.0</td>\n      <td>9.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>23.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>21.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>21.0</td>\n      <td>NaN</td>\n      <td>23.0</td>\n      <td>23.0</td>\n      <td>24.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>24.0</td>\n      <td>26.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":272}},"exec_count":272,"start":1513802329901,"input":"# Compare with this, where it literally gives a 2D table. \n\npd.pivot_table(grades, values = 'lt_pass', index = 'hw_pass', columns = 'pp_pass', aggfunc='median')\n","state":"done","pos":87,"cell_type":"code","type":"cell","end":1513802329950,"id":"dd9f7e","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')"},"exec_count":199}},"exec_count":199,"start":1513802325187,"input":"# Get the index \n\ndf.index","state":"done","pos":7,"cell_type":"code","type":"cell","end":1513802325203,"id":"2f78e5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"pandas.core.series.Series"},"exec_count":260}},"exec_count":260,"start":1513802329234,"input":"# This is unexpected -- the result of .stack() is a Series \n\ntype(df.stack())","state":"done","pos":73,"cell_type":"code","type":"cell","end":1513802329292,"id":"bf0bcc","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":230}},"exec_count":230,"start":1513802327721,"input":"# or by position\n\ndf.iat[0,1] = 99\ndf","state":"done","pos":39,"cell_type":"code","type":"cell","end":1513802327778,"id":"bf2b74","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2013-01-01   -0.470961\n2013-01-02    0.783181\n2013-01-03    0.530575\n2013-01-04    1.297245\n2013-01-05   -0.524840\n2013-01-06    0.060308\nFreq: D, Name: A, dtype: float64"},"exec_count":211}},"exec_count":211,"start":1513802326677,"input":"# Getting a single column\n\ndf['A']","state":"done","pos":19,"cell_type":"code","type":"cell","end":1513802326715,"id":"7881df","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":207}},"exec_count":207,"start":1513802326507,"input":"# Sort by columns \n\ndf.sort_index(axis=1)","state":"done","pos":15,"cell_type":"code","type":"cell","end":1513802326554,"id":"644947","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"6\" valign=\"top\">one</th>\n      <th rowspan=\"2\" valign=\"top\">x</th>\n      <th>bar</th>\n      <td>-0.693212</td>\n    </tr>\n    <tr>\n      <th>foo</th>\n      <td>0.197520</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">y</th>\n      <th>bar</th>\n      <td>0.010320</td>\n    </tr>\n    <tr>\n      <th>foo</th>\n      <td>0.053168</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">z</th>\n      <th>bar</th>\n      <td>0.849129</td>\n    </tr>\n    <tr>\n      <th>foo</th>\n      <td>0.537665</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">three</th>\n      <th>x</th>\n      <th>bar</th>\n      <td>0.203694</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <th>foo</th>\n      <td>0.915752</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <th>bar</th>\n      <td>-0.074950</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">two</th>\n      <th>x</th>\n      <th>foo</th>\n      <td>2.234928</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <th>bar</th>\n      <td>-0.257801</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <th>foo</th>\n      <td>-0.487827</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":267}},"exec_count":267,"start":1513802329603,"input":"# How is that different from the following, where I include the column variable \"C\" as an index variable?\n# Answer: It only reports back the data that are present. \n\npd.pivot_table(df, values='D', index=['A', 'B', 'C'])","state":"done","pos":82,"cell_type":"code","type":"cell","end":1513802329658,"id":"3334be","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>6.000000</td>\n      <td>6.000000</td>\n      <td>6.000000</td>\n      <td>6.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.279252</td>\n      <td>0.516260</td>\n      <td>-0.329026</td>\n      <td>-0.161599</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.722598</td>\n      <td>1.164724</td>\n      <td>0.450029</td>\n      <td>1.031277</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-0.524840</td>\n      <td>-0.891965</td>\n      <td>-0.921238</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-0.338144</td>\n      <td>-0.166565</td>\n      <td>-0.678036</td>\n      <td>-1.015025</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.295442</td>\n      <td>0.231565</td>\n      <td>-0.240276</td>\n      <td>-0.151487</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.720030</td>\n      <td>1.235423</td>\n      <td>0.004668</td>\n      <td>0.509511</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.297245</td>\n      <td>2.255627</td>\n      <td>0.165276</td>\n      <td>1.257144</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":204}},"exec_count":204,"start":1513802325868,"input":"# Get summary stats for numerical data\n\ndf.describe()","state":"done","pos":12,"cell_type":"code","type":"cell","end":1513802326214,"id":"e5ecb1","kernel":"anaconda3"}
{"type":"cell","id":"a65dea","pos":88,"input":"### Time Series\n\n","cell_type":"markdown","exec_count":0}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":212}},"exec_count":212,"start":1513802326719,"input":"# Getting a slice of rows for all columns \n\ndf[0:3]","state":"done","pos":20,"cell_type":"code","type":"cell","end":1513802326754,"id":"e577b7","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":210}},"exec_count":210,"start":1513802326620,"input":"# After: \n\ndf.sort_values(by='B')","state":"done","pos":18,"cell_type":"code","type":"cell","end":1513802326671,"id":"e0f953","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":231}},"exec_count":231,"start":1513802327783,"input":"# or by assigning with a numpy array\n\ndf.loc[:,'D'] = np.array([5] * len(df))\ndf","state":"done","pos":40,"cell_type":"code","type":"cell","end":1513802327805,"id":"880e45","kernel":"anaconda3"}
{"output":{"0":{"text":"<class 'pandas.core.frame.DataFrame'>\nInt64Index: 4 entries, 0 to 3\nData columns (total 6 columns):\nA    4 non-null float64\nB    4 non-null datetime64[ns]\nC    4 non-null float32\nD    4 non-null int32\nE    4 non-null category\nF    4 non-null object\ndtypes: category(1), datetime64[ns](1), float32(1), float64(1), int32(1), object(1)\nmemory usage: 260.0+ bytes\n","name":"stdout"}},"exec_count":198,"start":1513802325162,"input":"# THis is a little different than info\n\ndf2.info()","state":"done","pos":6,"cell_type":"code","type":"cell","end":1513802325184,"id":"389eae","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64"},"exec_count":227}},"exec_count":227,"start":1513802327613,"input":"s1","state":"done","pos":35,"cell_type":"code","type":"cell","end":1513802327644,"id":"2f783a","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":234}},"exec_count":234,"start":1513802327898,"input":"df1.loc[dates[0]:dates[1], 'E'] = 1\ndf1","state":"done","pos":44,"cell_type":"code","type":"cell","end":1513802327992,"id":"d9729b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"A    1.297245\nB   -0.120698\nC    0.076713\nD   -1.350733\nName: 2013-01-04 00:00:00, dtype: float64"},"exec_count":218}},"exec_count":218,"start":1513802327097,"input":"# Selection by position (integer location)\n\ndf.iloc[3]\n\n# Again this is a ROW","state":"done","pos":26,"cell_type":"code","type":"cell","end":1513802327114,"id":"10478c","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>2013-01-01 00:00:00</th>\n      <th>2013-01-02 00:00:00</th>\n      <th>2013-01-03 00:00:00</th>\n      <th>2013-01-04 00:00:00</th>\n      <th>2013-01-05 00:00:00</th>\n      <th>2013-01-06 00:00:00</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>-0.470961</td>\n      <td>0.783181</td>\n      <td>0.530575</td>\n      <td>1.297245</td>\n      <td>-0.524840</td>\n      <td>0.060308</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>0.583828</td>\n      <td>-0.181854</td>\n      <td>-0.891965</td>\n      <td>-0.120698</td>\n      <td>2.255627</td>\n      <td>1.452621</td>\n    </tr>\n    <tr>\n      <th>C</th>\n      <td>-0.814353</td>\n      <td>-0.211469</td>\n      <td>0.165276</td>\n      <td>0.076713</td>\n      <td>-0.921238</td>\n      <td>-0.269083</td>\n    </tr>\n    <tr>\n      <th>D</th>\n      <td>0.627546</td>\n      <td>-0.458381</td>\n      <td>0.155407</td>\n      <td>-1.350733</td>\n      <td>1.257144</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":206}},"exec_count":206,"start":1513802326293,"input":"# Transpose data\n\ndf.T","state":"done","pos":14,"cell_type":"code","type":"cell","end":1513802326503,"id":"472d6e","kernel":"anaconda3"}
{"type":"cell","id":"56c469","pos":75,"input":"","cell_type":"code"}
{"output":{"0":{"data":{"text/plain":"0    6\n1    0\n2    5\n3    1\n4    5\n5    4\n6    2\n7    3\n8    4\n9    2\ndtype: int64"},"exec_count":243}},"exec_count":243,"start":1513802328392,"input":"# Histograms\n\ns = pd.Series(np.random.randint(0,7,size=10))\ns","state":"done","pos":54,"cell_type":"code","type":"cell","end":1513802328399,"id":"8f7ace","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gp</th>\n    </tr>\n    <tr>\n      <th>hw_pass</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>20.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>24.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":270}},"exec_count":270,"start":1513802329764,"input":"pd.pivot_table(grades, values = 'gp', index = 'hw_pass', aggfunc='median')","state":"done","pos":85,"cell_type":"code","type":"cell","end":1513802329798,"id":"2e372a","kernel":"anaconda3"}
{"exec_count":264,"start":1513802329421,"input":"# Example \n\ndf = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,\n                    'B' : ['x', 'y', 'z'] * 4,\n                    'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,\n                    'D' : np.random.randn(12),\n                    'E' : np.random.randn(12)})","state":"done","pos":79,"cell_type":"code","type":"cell","end":1513802329489,"id":"25b59b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<pandas.core.groupby.DataFrameGroupBy object at 0x7f6c03a04d68>"},"exec_count":255}},"exec_count":255,"start":1513802328998,"input":"df.groupby('A')","state":"done","pos":67,"cell_type":"code","type":"cell","end":1513802329038,"id":"6562de","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":219}},"exec_count":219,"start":1513802327127,"input":"# With slices \n\ndf.iloc[3:5, 0:2]","state":"done","pos":27,"cell_type":"code","type":"cell","end":1513802327197,"id":"db0bc1","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"5    2\n4    2\n2    2\n6    1\n3    1\n1    1\n0    1\ndtype: int64"},"exec_count":244}},"exec_count":244,"start":1513802328473,"input":"s.value_counts()","state":"done","pos":55,"cell_type":"code","type":"cell","end":1513802328480,"id":"fbe721","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.601748</td>\n      <td>1.440776</td>\n      <td>-0.762133</td>\n      <td>1.183353</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.029397</td>\n      <td>1.071071</td>\n      <td>-1.730548</td>\n      <td>-1.077390</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":247}},"exec_count":247,"start":1513802328561,"input":"piece2 = df[3:7]\npiece3 = df[7:]\n\npiece1","state":"done","pos":59,"cell_type":"code","type":"cell","end":1513802328604,"id":"1f682e","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>5</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>5</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":238}},"exec_count":238,"start":1513802328141,"input":"df","state":"done","pos":49,"cell_type":"code","type":"cell","end":1513802328166,"id":"36e57b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":236}},"exec_count":236,"start":1513802328051,"input":"# Fill in missing data \n\ndf1.fillna(value = 5)\ndf1","state":"done","pos":46,"cell_type":"code","type":"cell","end":1513802328072,"id":"ef8c30","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.601748</td>\n      <td>1.440776</td>\n      <td>-0.762133</td>\n      <td>1.183353</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.029397</td>\n      <td>1.071071</td>\n      <td>-1.730548</td>\n      <td>-1.077390</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.778522</td>\n      <td>0.182125</td>\n      <td>-0.662679</td>\n      <td>-0.210606</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.596300</td>\n      <td>-0.066206</td>\n      <td>-0.647940</td>\n      <td>1.429423</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.560181</td>\n      <td>-0.667450</td>\n      <td>-0.935205</td>\n      <td>1.118494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.805177</td>\n      <td>0.426803</td>\n      <td>0.474340</td>\n      <td>-0.112722</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1.777205</td>\n      <td>-0.817350</td>\n      <td>0.840929</td>\n      <td>0.367726</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-0.732456</td>\n      <td>0.632114</td>\n      <td>2.569744</td>\n      <td>-0.126201</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.610535</td>\n      <td>0.627630</td>\n      <td>-1.516052</td>\n      <td>-0.455194</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":245}},"exec_count":245,"start":1513802328490,"input":"df = pd.DataFrame(np.random.randn(10,4))\ndf","state":"done","pos":57,"cell_type":"code","type":"cell","end":1513802328510,"id":"a9dc49","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>5</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>5</td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":232}},"exec_count":232,"start":1513802327809,"input":"df['F'] = s1\ndf","state":"done","pos":41,"cell_type":"code","type":"cell","end":1513802327863,"id":"1bcf03","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>7</th>\n      <td>1.777205</td>\n      <td>-0.817350</td>\n      <td>0.840929</td>\n      <td>0.367726</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-0.732456</td>\n      <td>0.632114</td>\n      <td>2.569744</td>\n      <td>-0.126201</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.610535</td>\n      <td>0.627630</td>\n      <td>-1.516052</td>\n      <td>-0.455194</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":249}},"exec_count":249,"start":1513802328638,"input":"piece3","state":"done","pos":61,"cell_type":"code","type":"cell","end":1513802328678,"id":"9f2b30","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":229}},"exec_count":229,"start":1513802327709,"input":"# We can set values by label:\ndf.at[dates[0], 'A'] = 0 \ndf","state":"done","pos":37,"cell_type":"code","type":"cell","end":1513802327717,"id":"b51db5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":235}},"exec_count":235,"start":1513802328018,"input":"# Drop rows with missing data\n\ndf1.dropna(how='any')","state":"done","pos":45,"cell_type":"code","type":"cell","end":1513802328027,"id":"c89cff","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>-1.778522</td>\n      <td>0.182125</td>\n      <td>-0.662679</td>\n      <td>-0.210606</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.596300</td>\n      <td>-0.066206</td>\n      <td>-0.647940</td>\n      <td>1.429423</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.560181</td>\n      <td>-0.667450</td>\n      <td>-0.935205</td>\n      <td>1.118494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.805177</td>\n      <td>0.426803</td>\n      <td>0.474340</td>\n      <td>-0.112722</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":248}},"exec_count":248,"start":1513802328617,"input":"piece2","state":"done","pos":60,"cell_type":"code","type":"cell","end":1513802328633,"id":"9cbdf8","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n    <tr>\n      <th>A</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>bar</th>\n      <td>0.695866</td>\n      <td>-0.359721</td>\n    </tr>\n    <tr>\n      <th>foo</th>\n      <td>-3.966331</td>\n      <td>-1.265340</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":256}},"exec_count":256,"start":1513802329042,"input":"df.groupby('A').sum()","state":"done","pos":68,"cell_type":"code","type":"cell","end":1513802329091,"id":"a3572b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2013-01-01    25.796412\n2013-01-02     1.277972\n2013-01-03     1.360777\n2013-01-04     1.850652\n2013-01-05     1.961910\n2013-01-06     2.248769\nFreq: D, dtype: float64"},"exec_count":240}},"exec_count":240,"start":1513802328213,"input":"# Same operation but switch axes\n\ndf.mean(1)","state":"done","pos":51,"cell_type":"code","type":"cell","end":1513802328253,"id":"c70697","kernel":"anaconda3"}
{"output":{"0":{"text":"[[-0.47096104  0.58382761 -0.8143534   0.6275456 ]\n [ 0.7831814  -0.18185392 -0.21146914 -0.45838083]\n [ 0.53057543 -0.89196518  0.16527604  0.15540719]\n [ 1.29724512 -0.12069797  0.07671324 -1.3507335 ]\n [-0.52483955  2.25562656 -0.92123832  1.25714361]\n [ 0.06030769  1.45262087 -0.26908335 -1.20057368]]\n[[1.0 Timestamp('2013-01-02 00:00:00') 1.0 3 'test' 'foo']\n [1.0 Timestamp('2013-01-02 00:00:00') 1.0 3 'train' 'foo']\n [1.0 Timestamp('2013-01-02 00:00:00') 1.0 3 'test' 'foo']\n [1.0 Timestamp('2013-01-02 00:00:00') 1.0 3 'train' 'foo']]\n","name":"stdout"}},"exec_count":203,"start":1513802325854,"input":"# Get values \n\nprint(df.values)\nprint(df2.values)","state":"done","pos":11,"cell_type":"code","type":"cell","end":1513802325859,"id":"264952","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"A     0.357745\nB    16.918955\nC    -0.329026\nD     5.000000\nF     3.000000\ndtype: float64"},"exec_count":239}},"exec_count":239,"start":1513802328171,"input":"df.mean()","state":"done","pos":50,"cell_type":"code","type":"cell","end":1513802328197,"id":"a74195","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.601748</td>\n      <td>1.440776</td>\n      <td>-0.762133</td>\n      <td>1.183353</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-1.029397</td>\n      <td>1.071071</td>\n      <td>-1.730548</td>\n      <td>-1.077390</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.778522</td>\n      <td>0.182125</td>\n      <td>-0.662679</td>\n      <td>-0.210606</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.596300</td>\n      <td>-0.066206</td>\n      <td>-0.647940</td>\n      <td>1.429423</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>0.560181</td>\n      <td>-0.667450</td>\n      <td>-0.935205</td>\n      <td>1.118494</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>-0.805177</td>\n      <td>0.426803</td>\n      <td>0.474340</td>\n      <td>-0.112722</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1.777205</td>\n      <td>-0.817350</td>\n      <td>0.840929</td>\n      <td>0.367726</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>-0.732456</td>\n      <td>0.632114</td>\n      <td>2.569744</td>\n      <td>-0.126201</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>-0.610535</td>\n      <td>0.627630</td>\n      <td>-1.516052</td>\n      <td>-0.455194</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>-0.314395</td>\n      <td>-1.086980</td>\n      <td>0.316307</td>\n      <td>-0.176163</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":253}},"exec_count":253,"start":1513802328798,"input":"df.append(s, ignore_index=True)","state":"done","pos":65,"cell_type":"code","type":"cell","end":1513802328921,"id":"375c29","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":224}},"exec_count":224,"start":1513802327464,"input":"# Boolean indexing\n\ndf[df.A > 0]","state":"done","pos":32,"cell_type":"code","type":"cell","end":1513802327514,"id":"2808a3","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>5</td>\n      <td>1.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>5</td>\n      <td>3.0</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":233}},"exec_count":233,"start":1513802327884,"input":"df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])\ndf1","state":"done","pos":43,"cell_type":"code","type":"cell","end":1513802327893,"id":"fdc48b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":208}},"exec_count":208,"start":1513802326563,"input":"# Sort by rows \n\ndf.sort_index(axis=0, ascending=False)","state":"done","pos":16,"cell_type":"code","type":"cell","end":1513802326590,"id":"d8a351","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2013-01-01  A    0.081012\n            B    0.841259\n            C   -0.253329\n            D    0.205287\n2013-01-02  A   -0.501089\n            B   -0.782863\n            C    2.168892\n            D   -0.570118\n2013-01-03  A    0.303933\n            B   -0.374885\ndtype: float64"},"exec_count":263}},"exec_count":263,"start":1513802329344,"input":"df_stack[0:10]","state":"done","pos":77,"cell_type":"code","type":"cell","end":1513802329418,"id":"fb3d25","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>E</th>\n      <th>F</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.0</td>\n      <td>2013-01-02</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>test</td>\n      <td>foo</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.0</td>\n      <td>2013-01-02</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>train</td>\n      <td>foo</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1.0</td>\n      <td>2013-01-02</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>test</td>\n      <td>foo</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.0</td>\n      <td>2013-01-02</td>\n      <td>1.0</td>\n      <td>3</td>\n      <td>train</td>\n      <td>foo</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":196}},"exec_count":196,"start":1513802325077,"input":"# Create a DataFrame by passing a dictionary where the keys are the columns and the values are indexed 0..whatever\n\n# Notes: \n# 'A':1 broadcasts 1 to every row of column A\n# 'B' consists of pandas time-date objects\n# 'C' puts a series in as a column\n\ndf2 = pd.DataFrame({ 'A' : 1.,\n   'B' : pd.Timestamp('20130102'),\n   'C' : pd.Series(1,index=list(range(4)),dtype='float32'),\n   'D' : np.array([3] * 4,dtype='int32'),\n   'E' : pd.Categorical([\"test\",\"train\",\"test\",\"train\"]),\n   'F' : 'foo' })\n\ndf2","state":"done","pos":4,"cell_type":"code","type":"cell","end":1513802325111,"id":"2a590e","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.000000</td>\n      <td>99.000000</td>\n      <td>-0.814353</td>\n      <td>5</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>98.818146</td>\n      <td>-1.025823</td>\n      <td>10</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>1.313757</td>\n      <td>97.926181</td>\n      <td>-0.860547</td>\n      <td>15</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>2.611002</td>\n      <td>97.805483</td>\n      <td>-0.783833</td>\n      <td>20</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>2.086162</td>\n      <td>100.061109</td>\n      <td>-1.705072</td>\n      <td>25</td>\n      <td>10.0</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>2.146470</td>\n      <td>101.513730</td>\n      <td>-1.974155</td>\n      <td>30</td>\n      <td>15.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":241}},"exec_count":241,"start":1513802328258,"input":"# Applying functions to a DataFrame\n\ndf.apply(np.cumsum)","state":"done","pos":52,"cell_type":"code","type":"cell","end":1513802328301,"id":"ccae8d","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.211469</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>0.165276</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>-0.921238</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":220}},"exec_count":220,"start":1513802327219,"input":"# With a list of values \n\ndf.iloc[[1,2,4], [0,2]]","state":"done","pos":28,"cell_type":"code","type":"cell","end":1513802327257,"id":"b6b119","kernel":"anaconda3"}
{"type":"cell","id":"b36fd1","pos":42,"input":"### Missing data \n\nMissing data are coded `NaN` by default and are not included in calculations. ","cell_type":"markdown"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hw_pass</th>\n      <th>hw_e</th>\n      <th>lt_pass</th>\n      <th>lt_e</th>\n      <th>pp_pass</th>\n      <th>pp_e</th>\n      <th>gp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Am</th>\n      <td>5</td>\n      <td>3</td>\n      <td>27</td>\n      <td>17</td>\n      <td>5</td>\n      <td>5</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>Bl</th>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>12</td>\n      <td>3</td>\n      <td>3</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>Br</th>\n      <td>4</td>\n      <td>2</td>\n      <td>26</td>\n      <td>17</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>Co</th>\n      <td>4</td>\n      <td>2</td>\n      <td>21</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>Cr</th>\n      <td>4</td>\n      <td>1</td>\n      <td>23</td>\n      <td>17</td>\n      <td>3</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":268}},"exec_count":268,"start":1513802329662,"input":"# Example using MTH 325 gradebook\n\ngrades = pd.read_csv('225-gradebook.csv', index_col=0)\n\ngrades.head()","state":"done","pos":83,"cell_type":"code","type":"cell","end":1513802329693,"id":"624cd4","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>lt_pass</th>\n    </tr>\n    <tr>\n      <th>hw_pass</th>\n      <th>pp_pass</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">0</th>\n      <th>0</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <th>3</th>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <th>3</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <th>0</th>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">4</th>\n      <th>0</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">5</th>\n      <th>4</th>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>26</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":271}},"exec_count":271,"start":1513802329803,"input":"# This one shows the median number of Learning Target Assessments passed using \n# a double index of Homework and Programming Projects passed. This is like a table with \n# hw_pass along the vertical edge and pp_pass along the top. \n\npd.pivot_table(grades, values = 'lt_pass', index = ['hw_pass', 'pp_pass'], aggfunc='median')","state":"done","pos":86,"cell_type":"code","type":"cell","end":1513802329851,"id":"6c42a9","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>0.081012</td>\n      <td>0.841259</td>\n      <td>-0.253329</td>\n      <td>0.205287</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>-0.501089</td>\n      <td>-0.782863</td>\n      <td>2.168892</td>\n      <td>-0.570118</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.303933</td>\n      <td>-0.374885</td>\n      <td>-0.998714</td>\n      <td>0.107065</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>0.428054</td>\n      <td>-1.944335</td>\n      <td>0.295469</td>\n      <td>-0.140973</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>0.189871</td>\n      <td>1.423412</td>\n      <td>-0.079785</td>\n      <td>0.373967</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>-0.164954</td>\n      <td>-0.176618</td>\n      <td>-2.520070</td>\n      <td>-0.115138</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":258}},"exec_count":258,"start":1513802329156,"input":"dates = pd.date_range('20130101', periods = 6)\ndf = pd.DataFrame(np.random.randn(6,4), index=dates, \n                  columns=list('ABCD'))\n\ndf","state":"done","pos":71,"cell_type":"code","type":"cell","end":1513802329185,"id":"e080fe","kernel":"anaconda3"}
{"exec_count":246,"start":1513802328516,"input":"piece1 = df[:3]","state":"done","pos":58,"cell_type":"code","type":"cell","end":1513802328556,"id":"28ed89","kernel":"anaconda3"}
{"type":"cell","id":"2c557d","pos":38,"input":"","cell_type":"raw"}
{"output":{"0":{"data":{"text/plain":"A     1.822085\nB    99.891965\nC     1.086514\nD     0.000000\nF     4.000000\ndtype: float64"},"exec_count":242}},"exec_count":242,"start":1513802328305,"input":"df.apply(lambda x: x.max()-x.min())","state":"done","pos":53,"cell_type":"code","type":"cell","end":1513802328325,"id":"1fae11","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>-0.470961</td>\n      <td>0.583828</td>\n      <td>-0.814353</td>\n      <td>0.627546</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n    <tr>\n      <th>2013-01-05</th>\n      <td>-0.524840</td>\n      <td>2.255627</td>\n      <td>-0.921238</td>\n      <td>1.257144</td>\n    </tr>\n    <tr>\n      <th>2013-01-06</th>\n      <td>0.060308</td>\n      <td>1.452621</td>\n      <td>-0.269083</td>\n      <td>-1.200574</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":228}},"exec_count":228,"start":1513802327649,"input":"df","state":"done","pos":36,"cell_type":"code","type":"cell","end":1513802327690,"id":"d6c6d1","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Index(['A', 'B', 'C', 'D', 'E', 'F'], dtype='object')"},"exec_count":202}},"exec_count":202,"start":1513802325363,"input":"df2.columns","state":"done","pos":10,"cell_type":"code","type":"cell","end":1513802325378,"id":"ae7723","kernel":"anaconda3"}
{"type":"cell","id":"70e539","pos":0,"input":"# 10 Minutes to pandas \n\n## Workalong notebook ","cell_type":"markdown"}
{"exec_count":193,"start":1513802322771,"input":"# Import all the things \n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","state":"done","pos":1,"cell_type":"code","type":"cell","end":1513802322776,"id":"247611","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":221}},"exec_count":221,"start":1513802327265,"input":"# Getting a selection of rows + all columns\n\ndf.iloc[1:3, :]","state":"done","pos":29,"cell_type":"code","type":"cell","end":1513802327300,"id":"9f412f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0   -0.314395\n1   -1.086980\n2    0.316307\n3   -0.176163\nName: 2, dtype: float64"},"exec_count":251}},"exec_count":251,"start":1513802328717,"input":"# Appending rows \n\ns = df.iloc[2]\ns","state":"done","pos":63,"cell_type":"code","type":"cell","end":1513802328740,"id":"c03836","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>C</th>\n      <th>bar</th>\n      <th>foo</th>\n    </tr>\n    <tr>\n      <th>A</th>\n      <th>B</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">one</th>\n      <th>x</th>\n      <td>-0.693212</td>\n      <td>0.197520</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>0.010320</td>\n      <td>0.053168</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>0.849129</td>\n      <td>0.537665</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">three</th>\n      <th>x</th>\n      <td>0.203694</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>NaN</td>\n      <td>0.915752</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>-0.074950</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">two</th>\n      <th>x</th>\n      <td>NaN</td>\n      <td>2.234928</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>-0.257801</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>NaN</td>\n      <td>-0.487827</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":266}},"exec_count":266,"start":1513802329558,"input":"# So: This produces something like a 3D table -- \"A\" values along the left edge, \"B\" values along the top, and \n# \"C\" values in depth. Look up the three coordinates and you will find the values (or \"NaN\" if there were no \n# data for that slot). \n\npd.pivot_table(df, values='D', index=['A', 'B'], columns=['C'])","state":"done","pos":81,"cell_type":"code","type":"cell","end":1513802329599,"id":"a47550","kernel":"anaconda3"}
{"exec_count":194,"start":1513802324414,"input":"# Create a series \n\ns = pd.Series([1,3,5,np.nan,6,8])","state":"done","pos":2,"cell_type":"code","type":"cell","end":1513802324420,"id":"2a0a6f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>0.356667</td>\n      <td>-0.902318</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>bar</td>\n      <td>one</td>\n      <td>-2.268854</td>\n      <td>-1.257246</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-0.104462</td>\n      <td>0.620327</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bar</td>\n      <td>three</td>\n      <td>0.925018</td>\n      <td>1.152166</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>foo</td>\n      <td>two</td>\n      <td>-1.401983</td>\n      <td>-1.672531</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bar</td>\n      <td>two</td>\n      <td>2.039702</td>\n      <td>-0.254641</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>foo</td>\n      <td>one</td>\n      <td>-1.467457</td>\n      <td>1.377871</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>foo</td>\n      <td>three</td>\n      <td>-1.349095</td>\n      <td>-0.688689</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":254}},"exec_count":254,"start":1513802328976,"input":"# Grouping \n\ndf = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',\n           'foo', 'bar', 'foo', 'foo'],\n    'B' : ['one', 'one', 'two', 'three',\n           'two', 'two', 'one', 'three'],\n    'C' : np.random.randn(8),\n    'D' : np.random.randn(8)})\n\ndf","state":"done","pos":66,"cell_type":"code","type":"cell","end":1513802328992,"id":"060355","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":205}},"exec_count":205,"start":1513802326222,"input":"# This method ignores all non-numerical data\n\ndf2.describe()","state":"done","pos":13,"cell_type":"code","type":"cell","end":1513802326281,"id":"2fbbdd","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n      <td>-0.458381</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n      <td>0.155407</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n      <td>-1.350733</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":213}},"exec_count":213,"start":1513802326763,"input":"\ndf['20130102':'20130104']","state":"done","pos":21,"cell_type":"code","type":"cell","end":1513802326806,"id":"beacd6","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n      <th>D</th>\n      <th>F</th>\n      <th>E</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-01</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2013-01-02</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":237}},"exec_count":237,"start":1513802328078,"input":"# Find all the Nan's\n\npd.isna(df1)","state":"done","pos":47,"cell_type":"code","type":"cell","end":1513802328135,"id":"77d76b","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2013-01-02</th>\n      <td>0.783181</td>\n      <td>-0.181854</td>\n      <td>-0.211469</td>\n    </tr>\n    <tr>\n      <th>2013-01-03</th>\n      <td>0.530575</td>\n      <td>-0.891965</td>\n      <td>0.165276</td>\n    </tr>\n    <tr>\n      <th>2013-01-04</th>\n      <td>1.297245</td>\n      <td>-0.120698</td>\n      <td>0.076713</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":217}},"exec_count":217,"start":1513802327042,"input":"# Slicing in both directions\n\ndf.loc['20130102':'20130104', 'A':'C']\n\n# Note that endpoints are included ","state":"done","pos":25,"cell_type":"code","type":"cell","end":1513802327092,"id":"a2e31f","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"Int64Index([0, 1, 2, 3], dtype='int64')"},"exec_count":200}},"exec_count":200,"start":1513802325208,"input":"df2.index","state":"done","pos":8,"cell_type":"code","type":"cell","end":1513802325223,"id":"839cf5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2013-01-01  A    0.081012\n            B    0.841259\n            C   -0.253329\n            D    0.205287\n2013-01-02  A   -0.501089\n            B   -0.782863\n            C    2.168892\n            D   -0.570118\n2013-01-03  A    0.303933\n            B   -0.374885\n            C   -0.998714\n            D    0.107065\n2013-01-04  A    0.428054\n            B   -1.944335\n            C    0.295469\n            D   -0.140973\n2013-01-05  A    0.189871\n            B    1.423412\n            C   -0.079785\n            D    0.373967\n2013-01-06  A   -0.164954\n            B   -0.176618\n            C   -2.520070\n            D   -0.115138\ndtype: float64"},"exec_count":259}},"exec_count":259,"start":1513802329200,"input":"df.stack()","state":"done","pos":72,"cell_type":"code","type":"cell","end":1513802329227,"id":"2eb936","kernel":"anaconda3"}
{"exec_count":273,"start":1513802330015,"input":"rng = pd.date_range('1/1/2012', periods=100, freq = 'S')","state":"done","pos":89,"type":"cell","end":1513802330019,"id":"679669","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"pandas.core.indexes.datetimes.DatetimeIndex"},"exec_count":274}},"exec_count":274,"start":1513802330026,"input":"type(rng)","state":"done","pos":90,"cell_type":"code","type":"cell","end":1513802330053,"id":"a692d9","kernel":"anaconda3"}
{"exec_count":275,"start":1513802330059,"input":"# Series of 500 random integers placed one second apart\n\nts = pd.Series(np.random.randint(0,500,len(rng)), index = rng)\n","state":"done","pos":91,"type":"cell","end":1513802330114,"id":"0dd371","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2012-01-01 00:00:00    142\n2012-01-01 00:00:01    192\n2012-01-01 00:00:02     35\n2012-01-01 00:00:03    293\n2012-01-01 00:00:04    446\n2012-01-01 00:00:05     29\n2012-01-01 00:00:06    382\n2012-01-01 00:00:07     22\n2012-01-01 00:00:08     83\n2012-01-01 00:00:09    110\n2012-01-01 00:00:10    261\n2012-01-01 00:00:11    103\n2012-01-01 00:00:12    494\n2012-01-01 00:00:13    311\n2012-01-01 00:00:14    238\n2012-01-01 00:00:15    499\n2012-01-01 00:00:16    301\n2012-01-01 00:00:17    409\n2012-01-01 00:00:18    412\n2012-01-01 00:00:19    148\n2012-01-01 00:00:20     32\n2012-01-01 00:00:21    448\n2012-01-01 00:00:22    490\n2012-01-01 00:00:23     52\n2012-01-01 00:00:24    432\n2012-01-01 00:00:25    111\n2012-01-01 00:00:26     16\n2012-01-01 00:00:27    412\n2012-01-01 00:00:28    439\n2012-01-01 00:00:29    156\n                      ... \n2012-01-01 00:01:10    249\n2012-01-01 00:01:11    415\n2012-01-01 00:01:12    363\n2012-01-01 00:01:13    115\n2012-01-01 00:01:14    485\n2012-01-01 00:01:15    449\n2012-01-01 00:01:16    290\n2012-01-01 00:01:17     13\n2012-01-01 00:01:18    204\n2012-01-01 00:01:19     76\n2012-01-01 00:01:20    395\n2012-01-01 00:01:21    327\n2012-01-01 00:01:22    221\n2012-01-01 00:01:23    153\n2012-01-01 00:01:24    137\n2012-01-01 00:01:25    466\n2012-01-01 00:01:26    479\n2012-01-01 00:01:27     26\n2012-01-01 00:01:28    211\n2012-01-01 00:01:29    315\n2012-01-01 00:01:30    132\n2012-01-01 00:01:31     71\n2012-01-01 00:01:32    104\n2012-01-01 00:01:33    288\n2012-01-01 00:01:34    389\n2012-01-01 00:01:35    292\n2012-01-01 00:01:36    269\n2012-01-01 00:01:37    365\n2012-01-01 00:01:38    212\n2012-01-01 00:01:39    168\nFreq: S, Length: 100, dtype: int64"},"exec_count":276}},"exec_count":276,"start":1513802330118,"input":"ts","state":"done","pos":92,"type":"cell","end":1513802330206,"id":"5d5db5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2012-01-01    25322\nFreq: 5T, dtype: int64"},"exec_count":277}},"exec_count":277,"start":1513802330216,"input":"# Resampling\n\nts.resample('5Min').sum()","state":"done","pos":93,"type":"cell","end":1513802330243,"id":"455895","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2012-03-06   -0.781761\n2012-03-07   -3.046693\n2012-03-08    1.147450\n2012-03-09   -0.988831\n2012-03-10   -1.326703\nFreq: D, dtype: float64"},"exec_count":278}},"exec_count":278,"start":1513802330261,"input":"# Time Zones\n\nrng = pd.date_range('3/6/2012 00:00', periods = 5, freq = 'D')\n\nts = pd.Series(np.random.randn(len(rng)), rng)\nts\n","state":"done","pos":94,"type":"cell","end":1513802330292,"id":"a92b63","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2012-03-06 00:00:00+00:00   -0.781761\n2012-03-07 00:00:00+00:00   -3.046693\n2012-03-08 00:00:00+00:00    1.147450\n2012-03-09 00:00:00+00:00   -0.988831\n2012-03-10 00:00:00+00:00   -1.326703\nFreq: D, dtype: float64"},"exec_count":279}},"exec_count":279,"start":1513802330305,"input":"ts_utc = ts.tz_localize('UTC')\nts_utc","state":"done","pos":95,"type":"cell","end":1513802330334,"id":"b951ba","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2012-03-05 19:00:00-05:00   -0.781761\n2012-03-06 19:00:00-05:00   -3.046693\n2012-03-07 19:00:00-05:00    1.147450\n2012-03-08 19:00:00-05:00   -0.988831\n2012-03-09 19:00:00-05:00   -1.326703\nFreq: D, dtype: float64"},"exec_count":280}},"exec_count":280,"start":1513802330352,"input":"# Convert to another time zone\n\nts_utc.tz_convert('US/Eastern')\n\n","state":"done","pos":96,"type":"cell","end":1513802330456,"id":"34739a","kernel":"anaconda3"}
{"type":"cell","id":"7e1520","pos":97,"input":"### Categoricals\n\n","cell_type":"markdown"}
{"exec_count":281,"start":1513802330469,"input":"df = pd.DataFrame({\"id\":[1,2,3,4,5,6], \"raw_grade\":['a', 'b', 'b', 'a', 'a', 'e']})","state":"done","pos":98,"type":"cell","end":1513802330499,"id":"62e231","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>raw_grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":282}},"exec_count":282,"start":1513802330503,"input":"df","state":"done","pos":99,"type":"cell","end":1513802330556,"id":"665d72","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: raw_grade, dtype: object"},"exec_count":283}},"exec_count":283,"start":1513802330559,"input":"df['raw_grade']","state":"done","pos":100,"type":"cell","end":1513802330576,"id":"12bf18","kernel":"anaconda3"}
{"exec_count":284,"start":1513802330580,"input":"# Convert the grade column into categorical data\n\ndf[\"grade\"] = df[\"raw_grade\"].astype(\"category\")","state":"done","pos":101,"type":"cell","end":1513802330605,"id":"addc2c","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>raw_grade</th>\n      <th>grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>b</td>\n      <td>b</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>a</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>a</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>e</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":285}},"exec_count":285,"start":1513802330611,"input":"df","state":"done","pos":102,"type":"cell","end":1513802330675,"id":"145ab8","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    a\n1    b\n2    b\n3    a\n4    a\n5    e\nName: grade, dtype: category\nCategories (3, object): [a, b, e]"},"exec_count":286}},"exec_count":286,"start":1513802330691,"input":"df[\"grade\"]","state":"done","pos":103,"type":"cell","end":1513802330706,"id":"603d9d","kernel":"anaconda3"}
{"exec_count":287,"start":1513802330711,"input":"# Reassigning the category levels\n\ndf[\"grade\"].cat.categories = [\"very good\", \"good\", \"very bad\"]","state":"done","pos":104,"type":"cell","end":1513802330730,"id":"4db712","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (3, object): [very good, good, very bad]"},"exec_count":288}},"exec_count":288,"start":1513802330750,"input":"df[\"grade\"]","state":"done","pos":105,"type":"cell","end":1513802330788,"id":"97b40c","kernel":"anaconda3"}
{"exec_count":290,"start":1513802377803,"input":"# Reorder category labels and add new ones\n\ndf[\"grade\"] = df[\"grade\"].cat.set_categories([\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"])","state":"done","pos":106,"type":"cell","end":1513802377805,"id":"12a348","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    very good\n1         good\n2         good\n3    very good\n4    very good\n5     very bad\nName: grade, dtype: category\nCategories (5, object): [very bad, bad, medium, good, very good]"},"exec_count":292}},"exec_count":292,"start":1513802396983,"input":"df['grade']","state":"done","pos":107,"type":"cell","end":1513802397009,"id":"903546","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>raw_grade</th>\n      <th>grade</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>e</td>\n      <td>very bad</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>b</td>\n      <td>good</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>b</td>\n      <td>good</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>a</td>\n      <td>very good</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>a</td>\n      <td>very good</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>a</td>\n      <td>very good</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":293}},"exec_count":293,"start":1513802502965,"input":"# Sorting within the categories -- order matters\n\ndf.sort_values(by=\"grade\")","state":"done","pos":108,"cell_type":"code","type":"cell","end":1513802503000,"id":"9826c8","kernel":"anaconda3"}
{"type":"cell","id":"0523a2","pos":107.5,"input":""}
{"exec_count":297,"start":1513802704409,"input":"# Experiment with mini-SBSG class \n\nsbsg = pd.DataFrame({'Student':['Alice', 'Bob', 'Chuck'],\n                   'HW1': ['E', 'M', 'R'],\n                   'PP1': ['M', 'M', 'F']})","state":"done","pos":109,"type":"cell","end":1513802704412,"id":"5b8861","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HW1</th>\n      <th>PP1</th>\n      <th>Student</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E</td>\n      <td>M</td>\n      <td>Alice</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>M</td>\n      <td>Bob</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R</td>\n      <td>F</td>\n      <td>Chuck</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":298}},"exec_count":298,"start":1513802705452,"input":"sbsg","state":"done","pos":110,"type":"cell","end":1513802705480,"id":"3d5cf2","kernel":"anaconda3"}
{"exec_count":301,"start":1513802888453,"input":"sbsg[\"hw\"] = sbsg['HW1'].astype('category')\nsbsg[\"pp\"] = sbsg['PP1'].astype('category')\n\nsbsg['hw']=sbsg['hw'].cat.set_categories(['E','M','R','F'])","state":"done","pos":111,"type":"cell","end":1513802888459,"id":"5c9646","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HW1</th>\n      <th>PP1</th>\n      <th>Student</th>\n      <th>hw</th>\n      <th>pp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E</td>\n      <td>M</td>\n      <td>Alice</td>\n      <td>E</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>M</td>\n      <td>Bob</td>\n      <td>M</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R</td>\n      <td>F</td>\n      <td>Chuck</td>\n      <td>R</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":302}},"exec_count":302,"start":1513802894664,"input":"sbsg\n","state":"done","pos":112,"type":"cell","end":1513802894704,"id":"50bf4e","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"0    E\n1    M\n2    R\nName: hw, dtype: category\nCategories (4, object): [E, M, R, F]"},"exec_count":303}},"exec_count":303,"start":1513802901562,"input":"sbsg['hw']","state":"done","pos":113,"type":"cell","end":1513802901595,"id":"a033e2","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>HW1</th>\n      <th>PP1</th>\n      <th>Student</th>\n      <th>hw</th>\n      <th>pp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E</td>\n      <td>M</td>\n      <td>Alice</td>\n      <td>E</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>M</td>\n      <td>Bob</td>\n      <td>M</td>\n      <td>M</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>R</td>\n      <td>F</td>\n      <td>Chuck</td>\n      <td>R</td>\n      <td>F</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":304}},"exec_count":304,"start":1513802922164,"input":"sbsg.sort_values(by='hw')","state":"done","pos":114,"type":"cell","end":1513802922210,"id":"a3e24e","kernel":"anaconda3"}
{"type":"cell","id":"5468f4","pos":115,"input":"### Plotting","cell_type":"markdown"}
{"exec_count":305,"start":1513803019973,"input":"ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))\n","state":"done","pos":116,"type":"cell","end":1513803019980,"id":"8def82","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2000-01-01   -2.056655\n2000-01-02    1.267884\n2000-01-03    0.526101\n2000-01-04    2.259108\n2000-01-05    0.804432\n2000-01-06    1.814622\n2000-01-07    0.565021\n2000-01-08   -1.437317\n2000-01-09    0.884973\n2000-01-10   -0.175551\n2000-01-11   -0.208439\n2000-01-12   -0.852541\n2000-01-13   -1.067296\n2000-01-14    0.374269\n2000-01-15   -0.292204\n2000-01-16   -1.183113\n2000-01-17   -1.285573\n2000-01-18   -1.124143\n2000-01-19    1.456447\n2000-01-20    0.224419\n2000-01-21    0.549055\n2000-01-22    3.220393\n2000-01-23   -0.182199\n2000-01-24    1.821552\n2000-01-25    0.435376\n2000-01-26    0.789613\n2000-01-27   -0.892277\n2000-01-28    0.727216\n2000-01-29   -0.240923\n2000-01-30    1.531742\n                ...   \n2002-08-28    0.959210\n2002-08-29   -2.168669\n2002-08-30   -0.199550\n2002-08-31    0.761215\n2002-09-01    0.980609\n2002-09-02    0.640674\n2002-09-03   -0.278951\n2002-09-04    0.646666\n2002-09-05    1.709805\n2002-09-06    1.209102\n2002-09-07    0.057237\n2002-09-08    1.307185\n2002-09-09   -0.698481\n2002-09-10   -0.344452\n2002-09-11    0.778362\n2002-09-12    1.474844\n2002-09-13   -0.033632\n2002-09-14    0.411350\n2002-09-15    3.307386\n2002-09-16    0.962804\n2002-09-17   -0.501909\n2002-09-18   -0.640629\n2002-09-19    0.166455\n2002-09-20    0.385102\n2002-09-21    0.377903\n2002-09-22   -1.340066\n2002-09-23   -0.534110\n2002-09-24   -2.676398\n2002-09-25    1.168073\n2002-09-26    1.236734\nFreq: D, Length: 1000, dtype: float64"},"exec_count":306}},"exec_count":306,"start":1513803021751,"input":"ts","scrolled":true,"state":"done","pos":117,"type":"cell","end":1513803021801,"id":"2035cc","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f6c03908208>"},"exec_count":307},"1":{"data":{"image/png":"836c73d5e3f0bdda60651b54e258010487565eca"},"metadata":{"image/png":{"width":707,"height":424}}}},"exec_count":307,"input":"# Produces a line plot of the data in the series\n\nts.plot()","state":"done","pos":118,"type":"cell","id":"f3abfe","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"2000-01-01    -2.056655\n2000-01-02    -0.788771\n2000-01-03    -0.262670\n2000-01-04     1.996437\n2000-01-05     2.800870\n2000-01-06     4.615492\n2000-01-07     5.180513\n2000-01-08     3.743196\n2000-01-09     4.628169\n2000-01-10     4.452618\n2000-01-11     4.244179\n2000-01-12     3.391638\n2000-01-13     2.324342\n2000-01-14     2.698611\n2000-01-15     2.406407\n2000-01-16     1.223294\n2000-01-17    -0.062279\n2000-01-18    -1.186422\n2000-01-19     0.270025\n2000-01-20     0.494444\n2000-01-21     1.043499\n2000-01-22     4.263892\n2000-01-23     4.081693\n2000-01-24     5.903245\n2000-01-25     6.338621\n2000-01-26     7.128235\n2000-01-27     6.235958\n2000-01-28     6.963174\n2000-01-29     6.722251\n2000-01-30     8.253992\n                ...    \n2002-08-28    19.155730\n2002-08-29    16.987062\n2002-08-30    16.787512\n2002-08-31    17.548727\n2002-09-01    18.529336\n2002-09-02    19.170010\n2002-09-03    18.891059\n2002-09-04    19.537725\n2002-09-05    21.247530\n2002-09-06    22.456632\n2002-09-07    22.513870\n2002-09-08    23.821054\n2002-09-09    23.122574\n2002-09-10    22.778121\n2002-09-11    23.556483\n2002-09-12    25.031327\n2002-09-13    24.997695\n2002-09-14    25.409045\n2002-09-15    28.716431\n2002-09-16    29.679236\n2002-09-17    29.177326\n2002-09-18    28.536697\n2002-09-19    28.703152\n2002-09-20    29.088254\n2002-09-21    29.466157\n2002-09-22    28.126090\n2002-09-23    27.591980\n2002-09-24    24.915582\n2002-09-25    26.083655\n2002-09-26    27.320390\nFreq: D, Length: 1000, dtype: float64"},"exec_count":308}},"exec_count":308,"start":1513803069232,"input":"ts = ts.cumsum()\nts","scrolled":true,"state":"done","pos":119,"type":"cell","end":1513803069271,"id":"1735cf","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f6c0385d940>"},"exec_count":309},"1":{"data":{"image/png":"cb49ba902642f39187b33dc990cfc77135b94d12"},"metadata":{"image/png":{"width":713,"height":424}}}},"exec_count":309,"start":1513803076337,"input":"ts.plot()","state":"done","pos":120,"type":"cell","end":1513803077413,"id":"f584e5","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>hw_pass</th>\n      <th>hw_e</th>\n      <th>lt_pass</th>\n      <th>lt_e</th>\n      <th>pp_pass</th>\n      <th>pp_e</th>\n      <th>gp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Am</th>\n      <td>5</td>\n      <td>3</td>\n      <td>27</td>\n      <td>17</td>\n      <td>5</td>\n      <td>5</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>Bl</th>\n      <td>2</td>\n      <td>1</td>\n      <td>21</td>\n      <td>12</td>\n      <td>3</td>\n      <td>3</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>Br</th>\n      <td>4</td>\n      <td>2</td>\n      <td>26</td>\n      <td>17</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>Co</th>\n      <td>4</td>\n      <td>2</td>\n      <td>21</td>\n      <td>14</td>\n      <td>0</td>\n      <td>0</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>Cr</th>\n      <td>4</td>\n      <td>1</td>\n      <td>23</td>\n      <td>17</td>\n      <td>3</td>\n      <td>3</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>Di</th>\n      <td>4</td>\n      <td>2</td>\n      <td>26</td>\n      <td>20</td>\n      <td>3</td>\n      <td>3</td>\n      <td>28</td>\n    </tr>\n    <tr>\n      <th>Du</th>\n      <td>4</td>\n      <td>3</td>\n      <td>22</td>\n      <td>15</td>\n      <td>4</td>\n      <td>4</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>Dy</th>\n      <td>0</td>\n      <td>0</td>\n      <td>11</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>Fl</th>\n      <td>5</td>\n      <td>4</td>\n      <td>28</td>\n      <td>24</td>\n      <td>5</td>\n      <td>5</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>Fr</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>Ga</th>\n      <td>5</td>\n      <td>3</td>\n      <td>25</td>\n      <td>17</td>\n      <td>5</td>\n      <td>5</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>He</th>\n      <td>4</td>\n      <td>3</td>\n      <td>23</td>\n      <td>17</td>\n      <td>3</td>\n      <td>3</td>\n      <td>24</td>\n    </tr>\n    <tr>\n      <th>Li</th>\n      <td>5</td>\n      <td>4</td>\n      <td>26</td>\n      <td>17</td>\n      <td>5</td>\n      <td>5</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>Mc</th>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>22</td>\n    </tr>\n    <tr>\n      <th>Ma</th>\n      <td>5</td>\n      <td>2</td>\n      <td>24</td>\n      <td>11</td>\n      <td>5</td>\n      <td>5</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>Ng</th>\n      <td>4</td>\n      <td>2</td>\n      <td>23</td>\n      <td>16</td>\n      <td>3</td>\n      <td>3</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>Sc</th>\n      <td>5</td>\n      <td>3</td>\n      <td>24</td>\n      <td>19</td>\n      <td>4</td>\n      <td>4</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>Sh</th>\n      <td>4</td>\n      <td>4</td>\n      <td>23</td>\n      <td>15</td>\n      <td>2</td>\n      <td>1</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>St</th>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>Va</th>\n      <td>3</td>\n      <td>1</td>\n      <td>13</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>Ve</th>\n      <td>4</td>\n      <td>3</td>\n      <td>25</td>\n      <td>22</td>\n      <td>3</td>\n      <td>3</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>Wa</th>\n      <td>5</td>\n      <td>4</td>\n      <td>25</td>\n      <td>22</td>\n      <td>5</td>\n      <td>4</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>Ya</th>\n      <td>5</td>\n      <td>4</td>\n      <td>27</td>\n      <td>21</td>\n      <td>5</td>\n      <td>5</td>\n      <td>25</td>\n    </tr>\n    <tr>\n      <th>Zi</th>\n      <td>1</td>\n      <td>0</td>\n      <td>23</td>\n      <td>11</td>\n      <td>3</td>\n      <td>3</td>\n      <td>22</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":310}},"exec_count":310,"start":1513803127069,"input":"grades","state":"done","pos":121,"type":"cell","end":1513803127110,"id":"fac6f6","kernel":"anaconda3"}
{"output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x7f6c03a13048>"},"exec_count":313},"1":{"data":{"text/plain":"<matplotlib.figure.Figure at 0x7f6c03a11320>"}},"2":{"data":{"image/png":"83910563adb12e037ef3b4048e0fa66404da5fe3"},"metadata":{"image/png":{"width":705,"height":413}}}},"exec_count":313,"start":1513803198151,"input":"# Plotting multiple columns at once\n\nplt.figure()\ngrades.plot()\nplt.legend(loc=\"best\")","state":"done","pos":122,"type":"cell","end":1513803199361,"id":"cbfa8b","kernel":"anaconda3"}
{"type":"cell","id":"6a488b","pos":123,"input":""}